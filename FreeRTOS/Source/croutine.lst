   1               		.file	"croutine.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	xCoRoutineCreate
  13               	xCoRoutineCreate:
  14               	.LFB0:
  15               		.file 1 "../../Source/croutine.c"
   1:../../Source/croutine.c **** /*
   2:../../Source/croutine.c ****  * FreeRTOS Kernel V10.1.1
   3:../../Source/croutine.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../../Source/croutine.c ****  *
   5:../../Source/croutine.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../../Source/croutine.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../../Source/croutine.c ****  * the Software without restriction, including without limitation the rights to
   8:../../Source/croutine.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../../Source/croutine.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../../Source/croutine.c ****  * subject to the following conditions:
  11:../../Source/croutine.c ****  *
  12:../../Source/croutine.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../../Source/croutine.c ****  * copies or substantial portions of the Software.
  14:../../Source/croutine.c ****  *
  15:../../Source/croutine.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../Source/croutine.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../../Source/croutine.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../../Source/croutine.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../../Source/croutine.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../../Source/croutine.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../../Source/croutine.c ****  *
  22:../../Source/croutine.c ****  * http://www.FreeRTOS.org
  23:../../Source/croutine.c ****  * http://aws.amazon.com/freertos
  24:../../Source/croutine.c ****  *
  25:../../Source/croutine.c ****  * 1 tab == 4 spaces!
  26:../../Source/croutine.c ****  */
  27:../../Source/croutine.c **** 
  28:../../Source/croutine.c **** #include "FreeRTOS.h"
  29:../../Source/croutine.c **** #include "task.h"
  30:../../Source/croutine.c **** #include "croutine.h"
  31:../../Source/croutine.c **** 
  32:../../Source/croutine.c **** /* Remove the whole file is co-routines are not being used. */
  33:../../Source/croutine.c **** #if( configUSE_CO_ROUTINES != 0 )
  34:../../Source/croutine.c **** 
  35:../../Source/croutine.c **** /*
  36:../../Source/croutine.c ****  * Some kernel aware debuggers require data to be viewed to be global, rather
  37:../../Source/croutine.c ****  * than file scope.
  38:../../Source/croutine.c ****  */
  39:../../Source/croutine.c **** #ifdef portREMOVE_STATIC_QUALIFIER
  40:../../Source/croutine.c **** 	#define static
  41:../../Source/croutine.c **** #endif
  42:../../Source/croutine.c **** 
  43:../../Source/croutine.c **** 
  44:../../Source/croutine.c **** /* Lists for ready and blocked co-routines. --------------------*/
  45:../../Source/croutine.c **** static List_t pxReadyCoRoutineLists[ configMAX_CO_ROUTINE_PRIORITIES ];	/*< Prioritised ready co-ro
  46:../../Source/croutine.c **** static List_t xDelayedCoRoutineList1;									/*< Delayed co-routines. */
  47:../../Source/croutine.c **** static List_t xDelayedCoRoutineList2;									/*< Delayed co-routines (two lists are used - one for
  48:../../Source/croutine.c **** static List_t * pxDelayedCoRoutineList;									/*< Points to the delayed co-routine list currently
  49:../../Source/croutine.c **** static List_t * pxOverflowDelayedCoRoutineList;							/*< Points to the delayed co-routine list cur
  50:../../Source/croutine.c **** static List_t xPendingReadyCoRoutineList;								/*< Holds co-routines that have been readied by an
  51:../../Source/croutine.c **** 
  52:../../Source/croutine.c **** /* Other file private variables. --------------------------------*/
  53:../../Source/croutine.c **** CRCB_t * pxCurrentCoRoutine = NULL;
  54:../../Source/croutine.c **** static UBaseType_t uxTopCoRoutineReadyPriority = 0;
  55:../../Source/croutine.c **** static TickType_t xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;
  56:../../Source/croutine.c **** 
  57:../../Source/croutine.c **** /* The initial state of the co-routine when it is created. */
  58:../../Source/croutine.c **** #define corINITIAL_STATE	( 0 )
  59:../../Source/croutine.c **** 
  60:../../Source/croutine.c **** /*
  61:../../Source/croutine.c ****  * Place the co-routine represented by pxCRCB into the appropriate ready queue
  62:../../Source/croutine.c ****  * for the priority.  It is inserted at the end of the list.
  63:../../Source/croutine.c ****  *
  64:../../Source/croutine.c ****  * This macro accesses the co-routine ready lists and therefore must not be
  65:../../Source/croutine.c ****  * used from within an ISR.
  66:../../Source/croutine.c ****  */
  67:../../Source/croutine.c **** #define prvAddCoRoutineToReadyQueue( pxCRCB )																		\
  68:../../Source/croutine.c **** {																													\
  69:../../Source/croutine.c **** 	if( pxCRCB->uxPriority > uxTopCoRoutineReadyPriority )															\
  70:../../Source/croutine.c **** 	{																												\
  71:../../Source/croutine.c **** 		uxTopCoRoutineReadyPriority = pxCRCB->uxPriority;															\
  72:../../Source/croutine.c **** 	}																												\
  73:../../Source/croutine.c **** 	vListInsertEnd( ( List_t * ) &( pxReadyCoRoutineLists[ pxCRCB->uxPriority ] ), &( pxCRCB->xGeneric
  74:../../Source/croutine.c **** }
  75:../../Source/croutine.c **** 
  76:../../Source/croutine.c **** /*
  77:../../Source/croutine.c ****  * Utility to ready all the lists used by the scheduler.  This is called
  78:../../Source/croutine.c ****  * automatically upon the creation of the first co-routine.
  79:../../Source/croutine.c ****  */
  80:../../Source/croutine.c **** static void prvInitialiseCoRoutineLists( void );
  81:../../Source/croutine.c **** 
  82:../../Source/croutine.c **** /*
  83:../../Source/croutine.c ****  * Co-routines that are readied by an interrupt cannot be placed directly into
  84:../../Source/croutine.c ****  * the ready lists (there is no mutual exclusion).  Instead they are placed in
  85:../../Source/croutine.c ****  * in the pending ready list in order that they can later be moved to the ready
  86:../../Source/croutine.c ****  * list by the co-routine scheduler.
  87:../../Source/croutine.c ****  */
  88:../../Source/croutine.c **** static void prvCheckPendingReadyList( void );
  89:../../Source/croutine.c **** 
  90:../../Source/croutine.c **** /*
  91:../../Source/croutine.c ****  * Macro that looks at the list of co-routines that are currently delayed to
  92:../../Source/croutine.c ****  * see if any require waking.
  93:../../Source/croutine.c ****  *
  94:../../Source/croutine.c ****  * Co-routines are stored in the queue in the order of their wake time -
  95:../../Source/croutine.c ****  * meaning once one co-routine has been found whose timer has not expired
  96:../../Source/croutine.c ****  * we need not look any further down the list.
  97:../../Source/croutine.c ****  */
  98:../../Source/croutine.c **** static void prvCheckDelayedList( void );
  99:../../Source/croutine.c **** 
 100:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 101:../../Source/croutine.c **** 
 102:../../Source/croutine.c **** BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t 
 103:../../Source/croutine.c **** {
  16               		.loc 1 103 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF92      		push r12
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 4
  22               		.cfi_offset 12, -3
  23 0002 DF92      		push r13
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 5
  26               		.cfi_offset 13, -4
  27 0004 EF92      		push r14
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 6
  30               		.cfi_offset 14, -5
  31 0006 FF92      		push r15
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 7
  34               		.cfi_offset 15, -6
  35 0008 1F93      		push r17
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 8
  38               		.cfi_offset 17, -7
  39 000a CF93      		push r28
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 9
  42               		.cfi_offset 28, -8
  43 000c DF93      		push r29
  44               	.LCFI6:
  45               		.cfi_def_cfa_offset 10
  46               		.cfi_offset 29, -9
  47               	/* prologue: function */
  48               	/* frame size = 0 */
  49               	/* stack size = 7 */
  50               	.L__stack_usage = 7
  51 000e 6C01      		movw r12,r24
  52 0010 162F      		mov r17,r22
  53 0012 F42E      		mov r15,r20
 104:../../Source/croutine.c **** BaseType_t xReturn;
 105:../../Source/croutine.c **** CRCB_t *pxCoRoutine;
 106:../../Source/croutine.c **** 
 107:../../Source/croutine.c **** 	/* Allocate the memory that will store the co-routine control block. */
 108:../../Source/croutine.c **** 	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
  54               		.loc 1 108 0
  55 0014 8AE1      		ldi r24,lo8(26)
  56 0016 90E0      		ldi r25,0
  57               	.LVL1:
  58 0018 0E94 0000 		call pvPortMalloc
  59               	.LVL2:
  60 001c EC01      		movw r28,r24
  61               	.LVL3:
 109:../../Source/croutine.c **** 	if( pxCoRoutine )
  62               		.loc 1 109 0
  63 001e 892B      		or r24,r25
  64 0020 01F4      		brne .+2
  65 0022 00C0      		rjmp .L6
 110:../../Source/croutine.c **** 	{
 111:../../Source/croutine.c **** 		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
 112:../../Source/croutine.c **** 		be created and the co-routine data structures need initialising. */
 113:../../Source/croutine.c **** 		if( pxCurrentCoRoutine == NULL )
  66               		.loc 1 113 0
  67 0024 8091 0000 		lds r24,pxCurrentCoRoutine
  68 0028 9091 0000 		lds r25,pxCurrentCoRoutine+1
  69               	.LVL4:
  70 002c 892B      		or r24,r25
  71 002e 01F4      		brne .L3
 114:../../Source/croutine.c **** 		{
 115:../../Source/croutine.c **** 			pxCurrentCoRoutine = pxCoRoutine;
  72               		.loc 1 115 0
  73 0030 D093 0000 		sts pxCurrentCoRoutine+1,r29
  74 0034 C093 0000 		sts pxCurrentCoRoutine,r28
  75               	.LVL5:
  76               	.LBB4:
  77               	.LBB5:
 116:../../Source/croutine.c **** 			prvInitialiseCoRoutineLists();
 117:../../Source/croutine.c **** 		}
 118:../../Source/croutine.c **** 
 119:../../Source/croutine.c **** 		/* Check the priority is within limits. */
 120:../../Source/croutine.c **** 		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
 121:../../Source/croutine.c **** 		{
 122:../../Source/croutine.c **** 			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
 123:../../Source/croutine.c **** 		}
 124:../../Source/croutine.c **** 
 125:../../Source/croutine.c **** 		/* Fill out the co-routine control block from the function parameters. */
 126:../../Source/croutine.c **** 		pxCoRoutine->uxState = corINITIAL_STATE;
 127:../../Source/croutine.c **** 		pxCoRoutine->uxPriority = uxPriority;
 128:../../Source/croutine.c **** 		pxCoRoutine->uxIndex = uxIndex;
 129:../../Source/croutine.c **** 		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 130:../../Source/croutine.c **** 
 131:../../Source/croutine.c **** 		/* Initialise all the other co-routine control block parameters. */
 132:../../Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
 133:../../Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
 134:../../Source/croutine.c **** 
 135:../../Source/croutine.c **** 		/* Set the co-routine control block as a link back from the ListItem_t.
 136:../../Source/croutine.c **** 		This is so we can get back to the containing CRCB from a generic item
 137:../../Source/croutine.c **** 		in a list. */
 138:../../Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
 139:../../Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
 140:../../Source/croutine.c **** 
 141:../../Source/croutine.c **** 		/* Event lists are always in priority order. */
 142:../../Source/croutine.c **** 		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_
 143:../../Source/croutine.c **** 
 144:../../Source/croutine.c **** 		/* Now the co-routine has been initialised it can be added to the ready
 145:../../Source/croutine.c **** 		list at the correct priority. */
 146:../../Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 147:../../Source/croutine.c **** 
 148:../../Source/croutine.c **** 		xReturn = pdPASS;
 149:../../Source/croutine.c **** 	}
 150:../../Source/croutine.c **** 	else
 151:../../Source/croutine.c **** 	{
 152:../../Source/croutine.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 153:../../Source/croutine.c **** 	}
 154:../../Source/croutine.c **** 
 155:../../Source/croutine.c **** 	return xReturn;
 156:../../Source/croutine.c **** }
 157:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 158:../../Source/croutine.c **** 
 159:../../Source/croutine.c **** void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
 160:../../Source/croutine.c **** {
 161:../../Source/croutine.c **** TickType_t xTimeToWake;
 162:../../Source/croutine.c **** 
 163:../../Source/croutine.c **** 	/* Calculate the time to wake - this may overflow but this is
 164:../../Source/croutine.c **** 	not a problem. */
 165:../../Source/croutine.c **** 	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 166:../../Source/croutine.c **** 
 167:../../Source/croutine.c **** 	/* We must remove ourselves from the ready list before adding
 168:../../Source/croutine.c **** 	ourselves to the blocked list as the same list item is used for
 169:../../Source/croutine.c **** 	both lists. */
 170:../../Source/croutine.c **** 	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 171:../../Source/croutine.c **** 
 172:../../Source/croutine.c **** 	/* The list item will be inserted in wake time order. */
 173:../../Source/croutine.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
 174:../../Source/croutine.c **** 
 175:../../Source/croutine.c **** 	if( xTimeToWake < xCoRoutineTickCount )
 176:../../Source/croutine.c **** 	{
 177:../../Source/croutine.c **** 		/* Wake time has overflowed.  Place this item in the
 178:../../Source/croutine.c **** 		overflow list. */
 179:../../Source/croutine.c **** 		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine-
 180:../../Source/croutine.c **** 	}
 181:../../Source/croutine.c **** 	else
 182:../../Source/croutine.c **** 	{
 183:../../Source/croutine.c **** 		/* The wake time has not overflowed, so we can use the
 184:../../Source/croutine.c **** 		current block list. */
 185:../../Source/croutine.c **** 		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGeneri
 186:../../Source/croutine.c **** 	}
 187:../../Source/croutine.c **** 
 188:../../Source/croutine.c **** 	if( pxEventList )
 189:../../Source/croutine.c **** 	{
 190:../../Source/croutine.c **** 		/* Also add the co-routine to an event list.  If this is done then the
 191:../../Source/croutine.c **** 		function must be called with interrupts disabled. */
 192:../../Source/croutine.c **** 		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
 193:../../Source/croutine.c **** 	}
 194:../../Source/croutine.c **** }
 195:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 196:../../Source/croutine.c **** 
 197:../../Source/croutine.c **** static void prvCheckPendingReadyList( void )
 198:../../Source/croutine.c **** {
 199:../../Source/croutine.c **** 	/* Are there any co-routines waiting to get moved to the ready list?  These
 200:../../Source/croutine.c **** 	are co-routines that have been readied by an ISR.  The ISR cannot access
 201:../../Source/croutine.c **** 	the	ready lists itself. */
 202:../../Source/croutine.c **** 	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 203:../../Source/croutine.c **** 	{
 204:../../Source/croutine.c **** 		CRCB_t *pxUnblockedCRCB;
 205:../../Source/croutine.c **** 
 206:../../Source/croutine.c **** 		/* The pending ready list can be accessed by an ISR. */
 207:../../Source/croutine.c **** 		portDISABLE_INTERRUPTS();
 208:../../Source/croutine.c **** 		{
 209:../../Source/croutine.c **** 			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
 210:../../Source/croutine.c **** 			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 211:../../Source/croutine.c **** 		}
 212:../../Source/croutine.c **** 		portENABLE_INTERRUPTS();
 213:../../Source/croutine.c **** 
 214:../../Source/croutine.c **** 		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
 215:../../Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
 216:../../Source/croutine.c **** 	}
 217:../../Source/croutine.c **** }
 218:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 219:../../Source/croutine.c **** 
 220:../../Source/croutine.c **** static void prvCheckDelayedList( void )
 221:../../Source/croutine.c **** {
 222:../../Source/croutine.c **** CRCB_t *pxCRCB;
 223:../../Source/croutine.c **** 
 224:../../Source/croutine.c **** 	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 225:../../Source/croutine.c **** 	while( xPassedTicks )
 226:../../Source/croutine.c **** 	{
 227:../../Source/croutine.c **** 		xCoRoutineTickCount++;
 228:../../Source/croutine.c **** 		xPassedTicks--;
 229:../../Source/croutine.c **** 
 230:../../Source/croutine.c **** 		/* If the tick count has overflowed we need to swap the ready lists. */
 231:../../Source/croutine.c **** 		if( xCoRoutineTickCount == 0 )
 232:../../Source/croutine.c **** 		{
 233:../../Source/croutine.c **** 			List_t * pxTemp;
 234:../../Source/croutine.c **** 
 235:../../Source/croutine.c **** 			/* Tick count has overflowed so we need to swap the delay lists.  If there are
 236:../../Source/croutine.c **** 			any items in pxDelayedCoRoutineList here then there is an error! */
 237:../../Source/croutine.c **** 			pxTemp = pxDelayedCoRoutineList;
 238:../../Source/croutine.c **** 			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 239:../../Source/croutine.c **** 			pxOverflowDelayedCoRoutineList = pxTemp;
 240:../../Source/croutine.c **** 		}
 241:../../Source/croutine.c **** 
 242:../../Source/croutine.c **** 		/* See if this tick has made a timeout expire. */
 243:../../Source/croutine.c **** 		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 244:../../Source/croutine.c **** 		{
 245:../../Source/croutine.c **** 			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
 246:../../Source/croutine.c **** 
 247:../../Source/croutine.c **** 			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
 248:../../Source/croutine.c **** 			{
 249:../../Source/croutine.c **** 				/* Timeout not yet expired. */
 250:../../Source/croutine.c **** 				break;
 251:../../Source/croutine.c **** 			}
 252:../../Source/croutine.c **** 
 253:../../Source/croutine.c **** 			portDISABLE_INTERRUPTS();
 254:../../Source/croutine.c **** 			{
 255:../../Source/croutine.c **** 				/* The event could have occurred just before this critical
 256:../../Source/croutine.c **** 				section.  If this is the case then the generic list item will
 257:../../Source/croutine.c **** 				have been moved to the pending ready list and the following
 258:../../Source/croutine.c **** 				line is still valid.  Also the pvContainer parameter will have
 259:../../Source/croutine.c **** 				been set to NULL so the following lines are also valid. */
 260:../../Source/croutine.c **** 				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
 261:../../Source/croutine.c **** 
 262:../../Source/croutine.c **** 				/* Is the co-routine waiting on an event also? */
 263:../../Source/croutine.c **** 				if( pxCRCB->xEventListItem.pxContainer )
 264:../../Source/croutine.c **** 				{
 265:../../Source/croutine.c **** 					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
 266:../../Source/croutine.c **** 				}
 267:../../Source/croutine.c **** 			}
 268:../../Source/croutine.c **** 			portENABLE_INTERRUPTS();
 269:../../Source/croutine.c **** 
 270:../../Source/croutine.c **** 			prvAddCoRoutineToReadyQueue( pxCRCB );
 271:../../Source/croutine.c **** 		}
 272:../../Source/croutine.c **** 	}
 273:../../Source/croutine.c **** 
 274:../../Source/croutine.c **** 	xLastTickCount = xCoRoutineTickCount;
 275:../../Source/croutine.c **** }
 276:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 277:../../Source/croutine.c **** 
 278:../../Source/croutine.c **** void vCoRoutineSchedule( void )
 279:../../Source/croutine.c **** {
 280:../../Source/croutine.c **** 	/* See if any co-routines readied by events need moving to the ready lists. */
 281:../../Source/croutine.c **** 	prvCheckPendingReadyList();
 282:../../Source/croutine.c **** 
 283:../../Source/croutine.c **** 	/* See if any delayed co-routines have timed out. */
 284:../../Source/croutine.c **** 	prvCheckDelayedList();
 285:../../Source/croutine.c **** 
 286:../../Source/croutine.c **** 	/* Find the highest priority queue that contains ready co-routines. */
 287:../../Source/croutine.c **** 	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 288:../../Source/croutine.c **** 	{
 289:../../Source/croutine.c **** 		if( uxTopCoRoutineReadyPriority == 0 )
 290:../../Source/croutine.c **** 		{
 291:../../Source/croutine.c **** 			/* No more co-routines to check. */
 292:../../Source/croutine.c **** 			return;
 293:../../Source/croutine.c **** 		}
 294:../../Source/croutine.c **** 		--uxTopCoRoutineReadyPriority;
 295:../../Source/croutine.c **** 	}
 296:../../Source/croutine.c **** 
 297:../../Source/croutine.c **** 	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
 298:../../Source/croutine.c **** 	 of the	same priority get an equal share of the processor time. */
 299:../../Source/croutine.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPrio
 300:../../Source/croutine.c **** 
 301:../../Source/croutine.c **** 	/* Call the co-routine. */
 302:../../Source/croutine.c **** 	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 303:../../Source/croutine.c **** 
 304:../../Source/croutine.c **** 	return;
 305:../../Source/croutine.c **** }
 306:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 307:../../Source/croutine.c **** 
 308:../../Source/croutine.c **** static void prvInitialiseCoRoutineLists( void )
 309:../../Source/croutine.c **** {
 310:../../Source/croutine.c **** UBaseType_t uxPriority;
 311:../../Source/croutine.c **** 
 312:../../Source/croutine.c **** 	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 313:../../Source/croutine.c **** 	{
 314:../../Source/croutine.c **** 		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
  78               		.loc 1 314 0
  79 0038 80E0      		ldi r24,lo8(pxReadyCoRoutineLists)
  80 003a 90E0      		ldi r25,hi8(pxReadyCoRoutineLists)
  81 003c 0E94 0000 		call vListInitialise
  82               	.LVL6:
  83 0040 80E0      		ldi r24,lo8(pxReadyCoRoutineLists+9)
  84 0042 90E0      		ldi r25,hi8(pxReadyCoRoutineLists+9)
  85 0044 0E94 0000 		call vListInitialise
  86               	.LVL7:
 315:../../Source/croutine.c **** 	}
 316:../../Source/croutine.c **** 
 317:../../Source/croutine.c **** 	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
  87               		.loc 1 317 0
  88 0048 80E0      		ldi r24,lo8(xDelayedCoRoutineList1)
  89 004a 90E0      		ldi r25,hi8(xDelayedCoRoutineList1)
  90 004c 0E94 0000 		call vListInitialise
  91               	.LVL8:
 318:../../Source/croutine.c **** 	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
  92               		.loc 1 318 0
  93 0050 80E0      		ldi r24,lo8(xDelayedCoRoutineList2)
  94 0052 90E0      		ldi r25,hi8(xDelayedCoRoutineList2)
  95 0054 0E94 0000 		call vListInitialise
  96               	.LVL9:
 319:../../Source/croutine.c **** 	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
  97               		.loc 1 319 0
  98 0058 80E0      		ldi r24,lo8(xPendingReadyCoRoutineList)
  99 005a 90E0      		ldi r25,hi8(xPendingReadyCoRoutineList)
 100 005c 0E94 0000 		call vListInitialise
 101               	.LVL10:
 320:../../Source/croutine.c **** 
 321:../../Source/croutine.c **** 	/* Start with pxDelayedCoRoutineList using list1 and the
 322:../../Source/croutine.c **** 	pxOverflowDelayedCoRoutineList using list2. */
 323:../../Source/croutine.c **** 	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
 102               		.loc 1 323 0
 103 0060 80E0      		ldi r24,lo8(xDelayedCoRoutineList1)
 104 0062 90E0      		ldi r25,hi8(xDelayedCoRoutineList1)
 105 0064 9093 0000 		sts pxDelayedCoRoutineList+1,r25
 106 0068 8093 0000 		sts pxDelayedCoRoutineList,r24
 324:../../Source/croutine.c **** 	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
 107               		.loc 1 324 0
 108 006c 80E0      		ldi r24,lo8(xDelayedCoRoutineList2)
 109 006e 90E0      		ldi r25,hi8(xDelayedCoRoutineList2)
 110 0070 9093 0000 		sts pxOverflowDelayedCoRoutineList+1,r25
 111 0074 8093 0000 		sts pxOverflowDelayedCoRoutineList,r24
 112               	.LVL11:
 113               	.L3:
 114 0078 1111      		cpse r17,__zero_reg__
 115 007a 11E0      		ldi r17,lo8(1)
 116               	.LVL12:
 117               	.L4:
 118               	.LBE5:
 119               	.LBE4:
 126:../../Source/croutine.c **** 		pxCoRoutine->uxPriority = uxPriority;
 120               		.loc 1 126 0
 121 007c 198E      		std Y+25,__zero_reg__
 122 007e 188E      		std Y+24,__zero_reg__
 127:../../Source/croutine.c **** 		pxCoRoutine->uxIndex = uxIndex;
 123               		.loc 1 127 0
 124 0080 1E8B      		std Y+22,r17
 128:../../Source/croutine.c **** 		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 125               		.loc 1 128 0
 126 0082 FF8A      		std Y+23,r15
 129:../../Source/croutine.c **** 
 127               		.loc 1 129 0
 128 0084 FE01      		movw r30,r28
 129 0086 C192      		st Z+,r12
 130 0088 D192      		st Z+,r13
 131 008a 7F01      		movw r14,r30
 132:../../Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
 132               		.loc 1 132 0
 133 008c CF01      		movw r24,r30
 134 008e 0E94 0000 		call vListInitialiseItem
 135               	.LVL13:
 133:../../Source/croutine.c **** 
 136               		.loc 1 133 0
 137 0092 CE01      		movw r24,r28
 138 0094 0C96      		adiw r24,12
 139 0096 0E94 0000 		call vListInitialiseItem
 140               	.LVL14:
 138:../../Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
 141               		.loc 1 138 0
 142 009a D987      		std Y+9,r29
 143 009c C887      		std Y+8,r28
 139:../../Source/croutine.c **** 
 144               		.loc 1 139 0
 145 009e DB8B      		std Y+19,r29
 146 00a0 CA8B      		std Y+18,r28
 142:../../Source/croutine.c **** 
 147               		.loc 1 142 0
 148 00a2 82E0      		ldi r24,lo8(2)
 149 00a4 90E0      		ldi r25,0
 150 00a6 811B      		sub r24,r17
 151 00a8 9109      		sbc r25,__zero_reg__
 152 00aa 9D87      		std Y+13,r25
 153 00ac 8C87      		std Y+12,r24
 146:../../Source/croutine.c **** 
 154               		.loc 1 146 0
 155 00ae 8E89      		ldd r24,Y+22
 156 00b0 9091 0000 		lds r25,uxTopCoRoutineReadyPriority
 157 00b4 9817      		cp r25,r24
 158 00b6 00F4      		brsh .L5
 146:../../Source/croutine.c **** 
 159               		.loc 1 146 0 is_stmt 0 discriminator 1
 160 00b8 8093 0000 		sts uxTopCoRoutineReadyPriority,r24
 161               	.L5:
 146:../../Source/croutine.c **** 
 162               		.loc 1 146 0 discriminator 3
 163 00bc F9E0      		ldi r31,lo8(9)
 164 00be 8F9F      		mul r24,r31
 165 00c0 C001      		movw r24,r0
 166 00c2 1124      		clr __zero_reg__
 167 00c4 B701      		movw r22,r14
 168 00c6 8050      		subi r24,lo8(-(pxReadyCoRoutineLists))
 169 00c8 9040      		sbci r25,hi8(-(pxReadyCoRoutineLists))
 170 00ca 0E94 0000 		call vListInsertEnd
 171               	.LVL15:
 148:../../Source/croutine.c **** 	}
 172               		.loc 1 148 0 is_stmt 1 discriminator 3
 173 00ce 81E0      		ldi r24,lo8(1)
 174 00d0 00C0      		rjmp .L2
 175               	.LVL16:
 176               	.L6:
 152:../../Source/croutine.c **** 	}
 177               		.loc 1 152 0
 178 00d2 8FEF      		ldi r24,lo8(-1)
 179               	.LVL17:
 180               	.L2:
 181               	/* epilogue start */
 156:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 182               		.loc 1 156 0
 183 00d4 DF91      		pop r29
 184 00d6 CF91      		pop r28
 185               	.LVL18:
 186 00d8 1F91      		pop r17
 187               	.LVL19:
 188 00da FF90      		pop r15
 189               	.LVL20:
 190 00dc EF90      		pop r14
 191 00de DF90      		pop r13
 192 00e0 CF90      		pop r12
 193               	.LVL21:
 194 00e2 0895      		ret
 195               		.cfi_endproc
 196               	.LFE0:
 198               	.global	vCoRoutineAddToDelayedList
 200               	vCoRoutineAddToDelayedList:
 201               	.LFB1:
 160:../../Source/croutine.c **** TickType_t xTimeToWake;
 202               		.loc 1 160 0
 203               		.cfi_startproc
 204               	.LVL22:
 205 00e4 0F93      		push r16
 206               	.LCFI7:
 207               		.cfi_def_cfa_offset 4
 208               		.cfi_offset 16, -3
 209 00e6 1F93      		push r17
 210               	.LCFI8:
 211               		.cfi_def_cfa_offset 5
 212               		.cfi_offset 17, -4
 213 00e8 CF93      		push r28
 214               	.LCFI9:
 215               		.cfi_def_cfa_offset 6
 216               		.cfi_offset 28, -5
 217 00ea DF93      		push r29
 218               	.LCFI10:
 219               		.cfi_def_cfa_offset 7
 220               		.cfi_offset 29, -6
 221               	/* prologue: function */
 222               	/* frame size = 0 */
 223               	/* stack size = 4 */
 224               	.L__stack_usage = 4
 225 00ec 8B01      		movw r16,r22
 165:../../Source/croutine.c **** 
 226               		.loc 1 165 0
 227 00ee C091 0000 		lds r28,xCoRoutineTickCount
 228 00f2 D091 0000 		lds r29,xCoRoutineTickCount+1
 229 00f6 C80F      		add r28,r24
 230 00f8 D91F      		adc r29,r25
 231               	.LVL23:
 170:../../Source/croutine.c **** 
 232               		.loc 1 170 0
 233 00fa 8091 0000 		lds r24,pxCurrentCoRoutine
 234 00fe 9091 0000 		lds r25,pxCurrentCoRoutine+1
 235               	.LVL24:
 236 0102 0296      		adiw r24,2
 237 0104 0E94 0000 		call uxListRemove
 238               	.LVL25:
 173:../../Source/croutine.c **** 
 239               		.loc 1 173 0
 240 0108 E091 0000 		lds r30,pxCurrentCoRoutine
 241 010c F091 0000 		lds r31,pxCurrentCoRoutine+1
 242 0110 D383      		std Z+3,r29
 243 0112 C283      		std Z+2,r28
 175:../../Source/croutine.c **** 	{
 244               		.loc 1 175 0
 245 0114 8091 0000 		lds r24,xCoRoutineTickCount
 246 0118 9091 0000 		lds r25,xCoRoutineTickCount+1
 247 011c BF01      		movw r22,r30
 248 011e 6E5F      		subi r22,-2
 249 0120 7F4F      		sbci r23,-1
 250 0122 C817      		cp r28,r24
 251 0124 D907      		cpc r29,r25
 252 0126 00F4      		brsh .L12
 179:../../Source/croutine.c **** 	}
 253               		.loc 1 179 0
 254 0128 8091 0000 		lds r24,pxOverflowDelayedCoRoutineList
 255 012c 9091 0000 		lds r25,pxOverflowDelayedCoRoutineList+1
 256 0130 00C0      		rjmp .L15
 257               	.L12:
 185:../../Source/croutine.c **** 	}
 258               		.loc 1 185 0
 259 0132 8091 0000 		lds r24,pxDelayedCoRoutineList
 260 0136 9091 0000 		lds r25,pxDelayedCoRoutineList+1
 261               	.L15:
 262 013a 0E94 0000 		call vListInsert
 263               	.LVL26:
 188:../../Source/croutine.c **** 	{
 264               		.loc 1 188 0
 265 013e 0115      		cp r16,__zero_reg__
 266 0140 1105      		cpc r17,__zero_reg__
 267 0142 01F0      		breq .L11
 192:../../Source/croutine.c **** 	}
 268               		.loc 1 192 0
 269 0144 6091 0000 		lds r22,pxCurrentCoRoutine
 270 0148 7091 0000 		lds r23,pxCurrentCoRoutine+1
 271 014c 645F      		subi r22,-12
 272 014e 7F4F      		sbci r23,-1
 273 0150 C801      		movw r24,r16
 274               	/* epilogue start */
 194:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 275               		.loc 1 194 0
 276 0152 DF91      		pop r29
 277 0154 CF91      		pop r28
 278               	.LVL27:
 279 0156 1F91      		pop r17
 280 0158 0F91      		pop r16
 281               	.LVL28:
 192:../../Source/croutine.c **** 	}
 282               		.loc 1 192 0
 283 015a 0C94 0000 		jmp vListInsert
 284               	.LVL29:
 285               	.L11:
 286               	/* epilogue start */
 194:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 287               		.loc 1 194 0
 288 015e DF91      		pop r29
 289 0160 CF91      		pop r28
 290               	.LVL30:
 291 0162 1F91      		pop r17
 292 0164 0F91      		pop r16
 293               	.LVL31:
 294 0166 0895      		ret
 295               		.cfi_endproc
 296               	.LFE1:
 298               	.global	vCoRoutineSchedule
 300               	vCoRoutineSchedule:
 301               	.LFB4:
 279:../../Source/croutine.c **** 	/* See if any co-routines readied by events need moving to the ready lists. */
 302               		.loc 1 279 0
 303               		.cfi_startproc
 304 0168 FF92      		push r15
 305               	.LCFI11:
 306               		.cfi_def_cfa_offset 4
 307               		.cfi_offset 15, -3
 308 016a 0F93      		push r16
 309               	.LCFI12:
 310               		.cfi_def_cfa_offset 5
 311               		.cfi_offset 16, -4
 312 016c 1F93      		push r17
 313               	.LCFI13:
 314               		.cfi_def_cfa_offset 6
 315               		.cfi_offset 17, -5
 316 016e CF93      		push r28
 317               	.LCFI14:
 318               		.cfi_def_cfa_offset 7
 319               		.cfi_offset 28, -6
 320 0170 DF93      		push r29
 321               	.LCFI15:
 322               		.cfi_def_cfa_offset 8
 323               		.cfi_offset 29, -7
 324               	/* prologue: function */
 325               	/* frame size = 0 */
 326               	/* stack size = 5 */
 327               	.L__stack_usage = 5
 328               	.LBB13:
 329               	.LBB14:
 330               	.LBB15:
 215:../../Source/croutine.c **** 	}
 331               		.loc 1 215 0
 332 0172 99E0      		ldi r25,lo8(9)
 333 0174 F92E      		mov r15,r25
 334               	.L17:
 335               	.LBE15:
 202:../../Source/croutine.c **** 	{
 336               		.loc 1 202 0
 337 0176 8091 0000 		lds r24,xPendingReadyCoRoutineList
 338 017a 8823      		tst r24
 339 017c 01F0      		breq .L37
 340               	.LBB16:
 207:../../Source/croutine.c **** 		{
 341               		.loc 1 207 0
 342               	/* #APP */
 343               	 ;  207 "../../Source/croutine.c" 1
 344 017e F894      		cli
 345               	 ;  0 "" 2
 209:../../Source/croutine.c **** 			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 346               		.loc 1 209 0
 347               	/* #NOAPP */
 348 0180 E091 0000 		lds r30,xPendingReadyCoRoutineList+5
 349 0184 F091 0000 		lds r31,xPendingReadyCoRoutineList+5+1
 350 0188 C681      		ldd r28,Z+6
 351 018a D781      		ldd r29,Z+7
 352               	.LVL32:
 210:../../Source/croutine.c **** 		}
 353               		.loc 1 210 0
 354 018c CE01      		movw r24,r28
 355 018e 0C96      		adiw r24,12
 356 0190 0E94 0000 		call uxListRemove
 357               	.LVL33:
 212:../../Source/croutine.c **** 
 358               		.loc 1 212 0
 359               	/* #APP */
 360               	 ;  212 "../../Source/croutine.c" 1
 361 0194 7894      		sei
 362               	 ;  0 "" 2
 214:../../Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
 363               		.loc 1 214 0
 364               	/* #NOAPP */
 365 0196 8E01      		movw r16,r28
 366 0198 0E5F      		subi r16,-2
 367 019a 1F4F      		sbci r17,-1
 368 019c C801      		movw r24,r16
 369 019e 0E94 0000 		call uxListRemove
 370               	.LVL34:
 215:../../Source/croutine.c **** 	}
 371               		.loc 1 215 0
 372 01a2 8E89      		ldd r24,Y+22
 373 01a4 9091 0000 		lds r25,uxTopCoRoutineReadyPriority
 374 01a8 9817      		cp r25,r24
 375 01aa 00F4      		brsh .L18
 376 01ac 8093 0000 		sts uxTopCoRoutineReadyPriority,r24
 377               	.L18:
 378 01b0 F89E      		mul r15,r24
 379 01b2 C001      		movw r24,r0
 380 01b4 1124      		clr __zero_reg__
 381 01b6 B801      		movw r22,r16
 382 01b8 8050      		subi r24,lo8(-(pxReadyCoRoutineLists))
 383 01ba 9040      		sbci r25,hi8(-(pxReadyCoRoutineLists))
 384 01bc 0E94 0000 		call vListInsertEnd
 385               	.LVL35:
 386 01c0 00C0      		rjmp .L17
 387               	.LVL36:
 388               	.L37:
 389               	.LBE16:
 390               	.LBE14:
 391               	.LBE13:
 392               	.LBB17:
 393               	.LBB18:
 224:../../Source/croutine.c **** 	while( xPassedTicks )
 394               		.loc 1 224 0
 395 01c2 0E94 0000 		call xTaskGetTickCount
 396               	.LVL37:
 397 01c6 2091 0000 		lds r18,xLastTickCount
 398 01ca 3091 0000 		lds r19,xLastTickCount+1
 399 01ce 821B      		sub r24,r18
 400 01d0 930B      		sbc r25,r19
 401 01d2 9093 0000 		sts xPassedTicks+1,r25
 402 01d6 8093 0000 		sts xPassedTicks,r24
 270:../../Source/croutine.c **** 		}
 403               		.loc 1 270 0
 404 01da 89E0      		ldi r24,lo8(9)
 405 01dc F82E      		mov r15,r24
 406               	.L34:
 225:../../Source/croutine.c **** 	{
 407               		.loc 1 225 0
 408 01de 2091 0000 		lds r18,xPassedTicks
 409 01e2 3091 0000 		lds r19,xPassedTicks+1
 410 01e6 8091 0000 		lds r24,xCoRoutineTickCount
 411 01ea 9091 0000 		lds r25,xCoRoutineTickCount+1
 412 01ee 2115      		cp r18,__zero_reg__
 413 01f0 3105      		cpc r19,__zero_reg__
 414 01f2 01F4      		brne .+2
 415 01f4 00C0      		rjmp .L38
 227:../../Source/croutine.c **** 		xPassedTicks--;
 416               		.loc 1 227 0
 417 01f6 0196      		adiw r24,1
 418 01f8 9093 0000 		sts xCoRoutineTickCount+1,r25
 419 01fc 8093 0000 		sts xCoRoutineTickCount,r24
 228:../../Source/croutine.c **** 
 420               		.loc 1 228 0
 421 0200 2150      		subi r18,1
 422 0202 3109      		sbc r19,__zero_reg__
 423 0204 3093 0000 		sts xPassedTicks+1,r19
 424 0208 2093 0000 		sts xPassedTicks,r18
 231:../../Source/croutine.c **** 		{
 425               		.loc 1 231 0
 426 020c 892B      		or r24,r25
 427 020e 01F0      		breq .+2
 428 0210 00C0      		rjmp .L22
 429               	.LBB19:
 237:../../Source/croutine.c **** 			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 430               		.loc 1 237 0
 431 0212 8091 0000 		lds r24,pxDelayedCoRoutineList
 432 0216 9091 0000 		lds r25,pxDelayedCoRoutineList+1
 433               	.LVL38:
 238:../../Source/croutine.c **** 			pxOverflowDelayedCoRoutineList = pxTemp;
 434               		.loc 1 238 0
 435 021a 2091 0000 		lds r18,pxOverflowDelayedCoRoutineList
 436 021e 3091 0000 		lds r19,pxOverflowDelayedCoRoutineList+1
 437 0222 3093 0000 		sts pxDelayedCoRoutineList+1,r19
 438 0226 2093 0000 		sts pxDelayedCoRoutineList,r18
 239:../../Source/croutine.c **** 		}
 439               		.loc 1 239 0
 440 022a 9093 0000 		sts pxOverflowDelayedCoRoutineList+1,r25
 441 022e 8093 0000 		sts pxOverflowDelayedCoRoutineList,r24
 442 0232 00C0      		rjmp .L22
 443               	.LVL39:
 444               	.L25:
 445               	.LBE19:
 245:../../Source/croutine.c **** 
 446               		.loc 1 245 0
 447 0234 0580      		ldd __tmp_reg__,Z+5
 448 0236 F681      		ldd r31,Z+6
 449 0238 E02D      		mov r30,__tmp_reg__
 450 023a C681      		ldd r28,Z+6
 451 023c D781      		ldd r29,Z+7
 452               	.LVL40:
 247:../../Source/croutine.c **** 			{
 453               		.loc 1 247 0
 454 023e 2A81      		ldd r18,Y+2
 455 0240 3B81      		ldd r19,Y+3
 456 0242 8091 0000 		lds r24,xCoRoutineTickCount
 457 0246 9091 0000 		lds r25,xCoRoutineTickCount+1
 458 024a 8217      		cp r24,r18
 459 024c 9307      		cpc r25,r19
 460 024e 00F0      		brlo .L34
 253:../../Source/croutine.c **** 			{
 461               		.loc 1 253 0
 462               	/* #APP */
 463               	 ;  253 "../../Source/croutine.c" 1
 464 0250 F894      		cli
 465               	 ;  0 "" 2
 260:../../Source/croutine.c **** 
 466               		.loc 1 260 0
 467               	/* #NOAPP */
 468 0252 8E01      		movw r16,r28
 469 0254 0E5F      		subi r16,-2
 470 0256 1F4F      		sbci r17,-1
 471 0258 C801      		movw r24,r16
 472 025a 0E94 0000 		call uxListRemove
 473               	.LVL41:
 263:../../Source/croutine.c **** 				{
 474               		.loc 1 263 0
 475 025e 8C89      		ldd r24,Y+20
 476 0260 9D89      		ldd r25,Y+21
 477 0262 892B      		or r24,r25
 478 0264 01F0      		breq .L23
 265:../../Source/croutine.c **** 				}
 479               		.loc 1 265 0
 480 0266 CE01      		movw r24,r28
 481 0268 0C96      		adiw r24,12
 482 026a 0E94 0000 		call uxListRemove
 483               	.LVL42:
 484               	.L23:
 268:../../Source/croutine.c **** 
 485               		.loc 1 268 0
 486               	/* #APP */
 487               	 ;  268 "../../Source/croutine.c" 1
 488 026e 7894      		sei
 489               	 ;  0 "" 2
 270:../../Source/croutine.c **** 		}
 490               		.loc 1 270 0
 491               	/* #NOAPP */
 492 0270 8E89      		ldd r24,Y+22
 493 0272 9091 0000 		lds r25,uxTopCoRoutineReadyPriority
 494 0276 9817      		cp r25,r24
 495 0278 00F4      		brsh .L24
 496 027a 8093 0000 		sts uxTopCoRoutineReadyPriority,r24
 497               	.L24:
 498 027e F89E      		mul r15,r24
 499 0280 C001      		movw r24,r0
 500 0282 1124      		clr __zero_reg__
 501 0284 B801      		movw r22,r16
 502 0286 8050      		subi r24,lo8(-(pxReadyCoRoutineLists))
 503 0288 9040      		sbci r25,hi8(-(pxReadyCoRoutineLists))
 504 028a 0E94 0000 		call vListInsertEnd
 505               	.LVL43:
 506               	.L22:
 243:../../Source/croutine.c **** 		{
 507               		.loc 1 243 0
 508 028e E091 0000 		lds r30,pxDelayedCoRoutineList
 509 0292 F091 0000 		lds r31,pxDelayedCoRoutineList+1
 510 0296 8081      		ld r24,Z
 511 0298 8111      		cpse r24,__zero_reg__
 512 029a 00C0      		rjmp .L25
 513 029c 00C0      		rjmp .L34
 514               	.L38:
 274:../../Source/croutine.c **** }
 515               		.loc 1 274 0
 516 029e 9093 0000 		sts xLastTickCount+1,r25
 517 02a2 8093 0000 		sts xLastTickCount,r24
 518 02a6 8091 0000 		lds r24,uxTopCoRoutineReadyPriority
 519               	.LBE18:
 520               	.LBE17:
 287:../../Source/croutine.c **** 	{
 521               		.loc 1 287 0
 522 02aa 69E0      		ldi r22,lo8(9)
 523               	.L27:
 524 02ac 482F      		mov r20,r24
 525 02ae 50E0      		ldi r21,0
 526 02b0 649F      		mul r22,r20
 527 02b2 9001      		movw r18,r0
 528 02b4 659F      		mul r22,r21
 529 02b6 300D      		add r19,r0
 530 02b8 1124      		clr __zero_reg__
 531 02ba F901      		movw r30,r18
 532 02bc E050      		subi r30,lo8(-(pxReadyCoRoutineLists))
 533 02be F040      		sbci r31,hi8(-(pxReadyCoRoutineLists))
 534 02c0 9081      		ld r25,Z
 535 02c2 9111      		cpse r25,__zero_reg__
 536 02c4 00C0      		rjmp .L39
 289:../../Source/croutine.c **** 		{
 537               		.loc 1 289 0
 538 02c6 8111      		cpse r24,__zero_reg__
 539 02c8 00C0      		rjmp .L28
 540 02ca 1092 0000 		sts uxTopCoRoutineReadyPriority,__zero_reg__
 541               	/* epilogue start */
 305:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 542               		.loc 1 305 0
 543 02ce DF91      		pop r29
 544 02d0 CF91      		pop r28
 545 02d2 1F91      		pop r17
 546 02d4 0F91      		pop r16
 547 02d6 FF90      		pop r15
 548 02d8 0895      		ret
 549               	.L28:
 294:../../Source/croutine.c **** 	}
 550               		.loc 1 294 0
 551 02da 8150      		subi r24,lo8(-(-1))
 552 02dc 00C0      		rjmp .L27
 553               	.L39:
 554 02de 8093 0000 		sts uxTopCoRoutineReadyPriority,r24
 555               	.LVL44:
 556               	.LBB20:
 299:../../Source/croutine.c **** 
 557               		.loc 1 299 0
 558 02e2 A181      		ldd r26,Z+1
 559 02e4 B281      		ldd r27,Z+2
 560 02e6 1296      		adiw r26,2
 561 02e8 0D90      		ld __tmp_reg__,X+
 562 02ea BC91      		ld r27,X
 563 02ec A02D      		mov r26,__tmp_reg__
 564 02ee B283      		std Z+2,r27
 565 02f0 A183      		std Z+1,r26
 566 02f2 2050      		subi r18,lo8(-(pxReadyCoRoutineLists+3))
 567 02f4 3040      		sbci r19,hi8(-(pxReadyCoRoutineLists+3))
 568 02f6 A217      		cp r26,r18
 569 02f8 B307      		cpc r27,r19
 570 02fa 01F4      		brne .L31
 299:../../Source/croutine.c **** 
 571               		.loc 1 299 0 is_stmt 0 discriminator 1
 572 02fc 1296      		adiw r26,2
 573 02fe 8D91      		ld r24,X+
 574 0300 9C91      		ld r25,X
 575 0302 1397      		sbiw r26,2+1
 576 0304 9283      		std Z+2,r25
 577 0306 8183      		std Z+1,r24
 578               	.L31:
 299:../../Source/croutine.c **** 
 579               		.loc 1 299 0 discriminator 3
 580 0308 89E0      		ldi r24,lo8(9)
 581 030a 849F      		mul r24,r20
 582 030c F001      		movw r30,r0
 583 030e 859F      		mul r24,r21
 584 0310 F00D      		add r31,r0
 585 0312 1124      		clr __zero_reg__
 586 0314 E050      		subi r30,lo8(-(pxReadyCoRoutineLists))
 587 0316 F040      		sbci r31,hi8(-(pxReadyCoRoutineLists))
 588 0318 0180      		ldd __tmp_reg__,Z+1
 589 031a F281      		ldd r31,Z+2
 590 031c E02D      		mov r30,__tmp_reg__
 591 031e 8681      		ldd r24,Z+6
 592 0320 9781      		ldd r25,Z+7
 593 0322 9093 0000 		sts pxCurrentCoRoutine+1,r25
 594 0326 8093 0000 		sts pxCurrentCoRoutine,r24
 595               	.LBE20:
 302:../../Source/croutine.c **** 
 596               		.loc 1 302 0 is_stmt 1 discriminator 3
 597 032a DC01      		movw r26,r24
 598 032c ED91      		ld r30,X+
 599 032e FC91      		ld r31,X
 600 0330 1197      		sbiw r26,1
 601 0332 5796      		adiw r26,23
 602 0334 6C91      		ld r22,X
 603               	/* epilogue start */
 305:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 604               		.loc 1 305 0 discriminator 3
 605 0336 DF91      		pop r29
 606 0338 CF91      		pop r28
 607 033a 1F91      		pop r17
 608 033c 0F91      		pop r16
 609 033e FF90      		pop r15
 302:../../Source/croutine.c **** 
 610               		.loc 1 302 0 discriminator 3
 611 0340 1994      		eijmp
 612               	.LVL45:
 613               		.cfi_endproc
 614               	.LFE4:
 616               	.global	xCoRoutineRemoveFromEventList
 618               	xCoRoutineRemoveFromEventList:
 619               	.LFB6:
 325:../../Source/croutine.c **** }
 326:../../Source/croutine.c **** /*-----------------------------------------------------------*/
 327:../../Source/croutine.c **** 
 328:../../Source/croutine.c **** BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
 329:../../Source/croutine.c **** {
 620               		.loc 1 329 0
 621               		.cfi_startproc
 622               	.LVL46:
 623 0342 0F93      		push r16
 624               	.LCFI16:
 625               		.cfi_def_cfa_offset 4
 626               		.cfi_offset 16, -3
 627 0344 1F93      		push r17
 628               	.LCFI17:
 629               		.cfi_def_cfa_offset 5
 630               		.cfi_offset 17, -4
 631 0346 CF93      		push r28
 632               	.LCFI18:
 633               		.cfi_def_cfa_offset 6
 634               		.cfi_offset 28, -5
 635 0348 DF93      		push r29
 636               	.LCFI19:
 637               		.cfi_def_cfa_offset 7
 638               		.cfi_offset 29, -6
 639               	/* prologue: function */
 640               	/* frame size = 0 */
 641               	/* stack size = 4 */
 642               	.L__stack_usage = 4
 330:../../Source/croutine.c **** CRCB_t *pxUnblockedCRCB;
 331:../../Source/croutine.c **** BaseType_t xReturn;
 332:../../Source/croutine.c **** 
 333:../../Source/croutine.c **** 	/* This function is called from within an interrupt.  It can only access
 334:../../Source/croutine.c **** 	event lists and the pending ready list.  This function assumes that a
 335:../../Source/croutine.c **** 	check has already been made to ensure pxEventList is not empty. */
 336:../../Source/croutine.c **** 	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 643               		.loc 1 336 0
 644 034a DC01      		movw r26,r24
 645 034c 1596      		adiw r26,5
 646 034e ED91      		ld r30,X+
 647 0350 FC91      		ld r31,X
 648 0352 1697      		sbiw r26,5+1
 649 0354 C681      		ldd r28,Z+6
 650 0356 D781      		ldd r29,Z+7
 651               	.LVL47:
 337:../../Source/croutine.c **** 	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 652               		.loc 1 337 0
 653 0358 8E01      		movw r16,r28
 654 035a 045F      		subi r16,-12
 655 035c 1F4F      		sbci r17,-1
 656 035e C801      		movw r24,r16
 657               	.LVL48:
 658 0360 0E94 0000 		call uxListRemove
 659               	.LVL49:
 338:../../Source/croutine.c **** 	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem )
 660               		.loc 1 338 0
 661 0364 B801      		movw r22,r16
 662 0366 80E0      		ldi r24,lo8(xPendingReadyCoRoutineList)
 663 0368 90E0      		ldi r25,hi8(xPendingReadyCoRoutineList)
 664 036a 0E94 0000 		call vListInsertEnd
 665               	.LVL50:
 339:../../Source/croutine.c **** 
 340:../../Source/croutine.c **** 	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
 666               		.loc 1 340 0
 667 036e E091 0000 		lds r30,pxCurrentCoRoutine
 668 0372 F091 0000 		lds r31,pxCurrentCoRoutine+1
 341:../../Source/croutine.c **** 	{
 342:../../Source/croutine.c **** 		xReturn = pdTRUE;
 343:../../Source/croutine.c **** 	}
 344:../../Source/croutine.c **** 	else
 345:../../Source/croutine.c **** 	{
 346:../../Source/croutine.c **** 		xReturn = pdFALSE;
 347:../../Source/croutine.c **** 	}
 348:../../Source/croutine.c **** 
 349:../../Source/croutine.c **** 	return xReturn;
 669               		.loc 1 349 0
 670 0376 81E0      		ldi r24,lo8(1)
 671 0378 2E89      		ldd r18,Y+22
 672 037a 9689      		ldd r25,Z+22
 673 037c 2917      		cp r18,r25
 674 037e 00F4      		brsh .L41
 675 0380 80E0      		ldi r24,0
 676               	.L41:
 677               	/* epilogue start */
 350:../../Source/croutine.c **** }
 678               		.loc 1 350 0
 679 0382 DF91      		pop r29
 680 0384 CF91      		pop r28
 681               	.LVL51:
 682 0386 1F91      		pop r17
 683 0388 0F91      		pop r16
 684               	.LVL52:
 685 038a 0895      		ret
 686               		.cfi_endproc
 687               	.LFE6:
 689               		.local	xPassedTicks
 690               		.comm	xPassedTicks,2,1
 691               		.local	xLastTickCount
 692               		.comm	xLastTickCount,2,1
 693               		.local	xCoRoutineTickCount
 694               		.comm	xCoRoutineTickCount,2,1
 695               		.local	uxTopCoRoutineReadyPriority
 696               		.comm	uxTopCoRoutineReadyPriority,1,1
 697               	.global	pxCurrentCoRoutine
 698               		.section .bss
 701               	pxCurrentCoRoutine:
 702 0000 0000      		.zero	2
 703               		.local	xPendingReadyCoRoutineList
 704               		.comm	xPendingReadyCoRoutineList,9,1
 705               		.local	pxOverflowDelayedCoRoutineList
 706               		.comm	pxOverflowDelayedCoRoutineList,2,1
 707               		.local	pxDelayedCoRoutineList
 708               		.comm	pxDelayedCoRoutineList,2,1
 709               		.local	xDelayedCoRoutineList2
 710               		.comm	xDelayedCoRoutineList2,9,1
 711               		.local	xDelayedCoRoutineList1
 712               		.comm	xDelayedCoRoutineList1,9,1
 713               		.local	pxReadyCoRoutineLists
 714               		.comm	pxReadyCoRoutineLists,18,1
 715               		.text
 716               	.Letext0:
 717               		.file 2 "/home/link/avr8-gnu-toolchain/avr/include/stdint.h"
 718               		.file 3 "../../Source/include/../portable/GCC/ATMega323/portmacro.h"
 719               		.file 4 "../../Source/include/list.h"
 720               		.file 5 "../../Source/include/croutine.h"
 721               		.file 6 "../../Source/include/portable.h"
 722               		.file 7 "../../Source/include/task.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 croutine.c
     /tmp/ccM8CuOj.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccM8CuOj.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccM8CuOj.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccM8CuOj.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccM8CuOj.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccM8CuOj.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccM8CuOj.s:13     .text:0000000000000000 xCoRoutineCreate
     /tmp/ccM8CuOj.s:701    .bss:0000000000000000 pxCurrentCoRoutine
     /tmp/ccM8CuOj.s:712    .bss:0000000000000028 pxReadyCoRoutineLists
     /tmp/ccM8CuOj.s:710    .bss:000000000000001f xDelayedCoRoutineList1
     /tmp/ccM8CuOj.s:708    .bss:0000000000000016 xDelayedCoRoutineList2
     /tmp/ccM8CuOj.s:696    .bss:0000000000000009 xPendingReadyCoRoutineList
     /tmp/ccM8CuOj.s:706    .bss:0000000000000014 pxDelayedCoRoutineList
     /tmp/ccM8CuOj.s:704    .bss:0000000000000012 pxOverflowDelayedCoRoutineList
     /tmp/ccM8CuOj.s:694    .bss:0000000000000008 uxTopCoRoutineReadyPriority
     /tmp/ccM8CuOj.s:200    .text:00000000000000e4 vCoRoutineAddToDelayedList
     /tmp/ccM8CuOj.s:692    .bss:0000000000000006 xCoRoutineTickCount
     /tmp/ccM8CuOj.s:300    .text:0000000000000168 vCoRoutineSchedule
     /tmp/ccM8CuOj.s:690    .bss:0000000000000004 xLastTickCount
                             .bss:0000000000000002 xPassedTicks
     /tmp/ccM8CuOj.s:618    .text:0000000000000342 xCoRoutineRemoveFromEventList

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
vListInitialiseItem
vListInsertEnd
uxListRemove
vListInsert
xTaskGetTickCount
__do_clear_bss
