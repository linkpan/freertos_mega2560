   1               		.file	"comtest.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.lowtext,"ax",@progbits
  13               	vComRxTask:
  14               	.LFB6:
  15               		.file 1 "../Common/Minimal/comtest.c"
   1:../Common/Minimal/comtest.c **** /*
   2:../Common/Minimal/comtest.c ****  * FreeRTOS Kernel V10.1.1
   3:../Common/Minimal/comtest.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Common/Minimal/comtest.c ****  *
   5:../Common/Minimal/comtest.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Common/Minimal/comtest.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Common/Minimal/comtest.c ****  * the Software without restriction, including without limitation the rights to
   8:../Common/Minimal/comtest.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Common/Minimal/comtest.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Common/Minimal/comtest.c ****  * subject to the following conditions:
  11:../Common/Minimal/comtest.c ****  *
  12:../Common/Minimal/comtest.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../Common/Minimal/comtest.c ****  * copies or substantial portions of the Software.
  14:../Common/Minimal/comtest.c ****  *
  15:../Common/Minimal/comtest.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Common/Minimal/comtest.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Common/Minimal/comtest.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Common/Minimal/comtest.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Common/Minimal/comtest.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Common/Minimal/comtest.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Common/Minimal/comtest.c ****  *
  22:../Common/Minimal/comtest.c ****  * http://www.FreeRTOS.org
  23:../Common/Minimal/comtest.c ****  * http://aws.amazon.com/freertos
  24:../Common/Minimal/comtest.c ****  *
  25:../Common/Minimal/comtest.c ****  * 1 tab == 4 spaces!
  26:../Common/Minimal/comtest.c ****  */
  27:../Common/Minimal/comtest.c **** 
  28:../Common/Minimal/comtest.c **** 
  29:../Common/Minimal/comtest.c **** /*
  30:../Common/Minimal/comtest.c ****  * This version of comtest. c is for use on systems that have limited stack
  31:../Common/Minimal/comtest.c ****  * space and no display facilities.  The complete version can be found in
  32:../Common/Minimal/comtest.c ****  * the Demo/Common/Full directory.
  33:../Common/Minimal/comtest.c ****  *
  34:../Common/Minimal/comtest.c ****  * Creates two tasks that operate on an interrupt driven serial port.  A
  35:../Common/Minimal/comtest.c ****  * loopback connector should be used so that everything that is transmitted is
  36:../Common/Minimal/comtest.c ****  * also received.  The serial port does not use any flow control.  On a
  37:../Common/Minimal/comtest.c ****  * standard 9way 'D' connector pins two and three should be connected together.
  38:../Common/Minimal/comtest.c ****  *
  39:../Common/Minimal/comtest.c ****  * The first task posts a sequence of characters to the Tx queue, toggling an
  40:../Common/Minimal/comtest.c ****  * LED on each successful post.  At the end of the sequence it sleeps for a
  41:../Common/Minimal/comtest.c ****  * pseudo-random period before resending the same sequence.
  42:../Common/Minimal/comtest.c ****  *
  43:../Common/Minimal/comtest.c ****  * The UART Tx end interrupt is enabled whenever data is available in the Tx
  44:../Common/Minimal/comtest.c ****  * queue.  The Tx end ISR removes a single character from the Tx queue and
  45:../Common/Minimal/comtest.c ****  * passes it to the UART for transmission.
  46:../Common/Minimal/comtest.c ****  *
  47:../Common/Minimal/comtest.c ****  * The second task blocks on the Rx queue waiting for a character to become
  48:../Common/Minimal/comtest.c ****  * available.  When the UART Rx end interrupt receives a character it places
  49:../Common/Minimal/comtest.c ****  * it in the Rx queue, waking the second task.  The second task checks that the
  50:../Common/Minimal/comtest.c ****  * characters removed from the Rx queue form the same sequence as those posted
  51:../Common/Minimal/comtest.c ****  * to the Tx queue, and toggles an LED for each correct character.
  52:../Common/Minimal/comtest.c ****  *
  53:../Common/Minimal/comtest.c ****  * The receiving task is spawned with a higher priority than the transmitting
  54:../Common/Minimal/comtest.c ****  * task.  The receiver will therefore wake every time a character is
  55:../Common/Minimal/comtest.c ****  * transmitted so neither the Tx or Rx queue should ever hold more than a few
  56:../Common/Minimal/comtest.c ****  * characters.
  57:../Common/Minimal/comtest.c ****  *
  58:../Common/Minimal/comtest.c ****  */
  59:../Common/Minimal/comtest.c **** 
  60:../Common/Minimal/comtest.c **** /* Scheduler include files. */
  61:../Common/Minimal/comtest.c **** #include <stdlib.h>
  62:../Common/Minimal/comtest.c **** #include "FreeRTOS.h"
  63:../Common/Minimal/comtest.c **** #include "task.h"
  64:../Common/Minimal/comtest.c **** 
  65:../Common/Minimal/comtest.c **** /* Demo program include files. */
  66:../Common/Minimal/comtest.c **** #include "serial.h"
  67:../Common/Minimal/comtest.c **** #include "comtest.h"
  68:../Common/Minimal/comtest.c **** #include "partest.h"
  69:../Common/Minimal/comtest.c **** #include <string.h>
  70:../Common/Minimal/comtest.c **** 
  71:../Common/Minimal/comtest.c **** #define comSTACK_SIZE				configMINIMAL_STACK_SIZE
  72:../Common/Minimal/comtest.c **** #define comTX_LED_OFFSET			( 0 )
  73:../Common/Minimal/comtest.c **** #define comRX_LED_OFFSET			( 1 )
  74:../Common/Minimal/comtest.c **** #define comTOTAL_PERMISSIBLE_ERRORS ( 2 )
  75:../Common/Minimal/comtest.c **** 
  76:../Common/Minimal/comtest.c **** /* The Tx task will transmit the sequence of characters at a pseudo random
  77:../Common/Minimal/comtest.c **** interval.  This is the maximum and minimum block time between sends. */
  78:../Common/Minimal/comtest.c **** #define comTX_MAX_BLOCK_TIME		( ( TickType_t ) 0x96 )
  79:../Common/Minimal/comtest.c **** #define comTX_MIN_BLOCK_TIME		( ( TickType_t ) 0x32 )
  80:../Common/Minimal/comtest.c **** #define comOFFSET_TIME				( ( TickType_t ) 3 )
  81:../Common/Minimal/comtest.c **** 
  82:../Common/Minimal/comtest.c **** /* We should find that each character can be queued for Tx immediately and we
  83:../Common/Minimal/comtest.c **** don't have to block to send. */
  84:../Common/Minimal/comtest.c **** #define comNO_BLOCK					( ( TickType_t ) 0 )
  85:../Common/Minimal/comtest.c **** 
  86:../Common/Minimal/comtest.c **** /* The Rx task will block on the Rx queue for a long period. */
  87:../Common/Minimal/comtest.c **** #define comRX_BLOCK_TIME			( ( TickType_t ) 0xffff )
  88:../Common/Minimal/comtest.c **** 
  89:../Common/Minimal/comtest.c **** /* The sequence transmitted is from comFIRST_BYTE to and including comLAST_BYTE. */
  90:../Common/Minimal/comtest.c **** #define comFIRST_BYTE				( 'A' )
  91:../Common/Minimal/comtest.c **** #define comLAST_BYTE				( 'X' )
  92:../Common/Minimal/comtest.c **** 
  93:../Common/Minimal/comtest.c **** #define comBUFFER_LEN				( ( UBaseType_t ) ( comLAST_BYTE - comFIRST_BYTE ) + ( UBaseType_t ) 1 )
  94:../Common/Minimal/comtest.c **** #define comINITIAL_RX_COUNT_VALUE	( 0 )
  95:../Common/Minimal/comtest.c **** 
  96:../Common/Minimal/comtest.c **** /* Handle to the com port used by both tasks. */
  97:../Common/Minimal/comtest.c **** static xComPortHandle xPort = NULL;
  98:../Common/Minimal/comtest.c **** 
  99:../Common/Minimal/comtest.c **** /* The transmit task as described at the top of the file. */
 100:../Common/Minimal/comtest.c **** static portTASK_FUNCTION_PROTO( vComTxTask, pvParameters );
 101:../Common/Minimal/comtest.c **** 
 102:../Common/Minimal/comtest.c **** /* The receive task as described at the top of the file. */
 103:../Common/Minimal/comtest.c **** static portTASK_FUNCTION_PROTO( vComRxTask, pvParameters );
 104:../Common/Minimal/comtest.c **** 
 105:../Common/Minimal/comtest.c **** /* The LED that should be toggled by the Rx and Tx tasks.  The Rx task will
 106:../Common/Minimal/comtest.c **** toggle LED ( uxBaseLED + comRX_LED_OFFSET).  The Tx task will toggle LED
 107:../Common/Minimal/comtest.c **** ( uxBaseLED + comTX_LED_OFFSET ). */
 108:../Common/Minimal/comtest.c **** static UBaseType_t uxBaseLED = 0;
 109:../Common/Minimal/comtest.c **** 
 110:../Common/Minimal/comtest.c **** /* Check variable used to ensure no error have occurred.  The Rx task will
 111:../Common/Minimal/comtest.c **** increment this variable after every successfully received sequence.  If at any
 112:../Common/Minimal/comtest.c **** time the sequence is incorrect the the variable will stop being incremented. */
 113:../Common/Minimal/comtest.c **** static volatile UBaseType_t uxRxLoops = comINITIAL_RX_COUNT_VALUE;
 114:../Common/Minimal/comtest.c **** 
 115:../Common/Minimal/comtest.c **** void xSerialxPrint( xComPortHandle pxPort, uint8_t * str) __attribute__ ((flatten));
 116:../Common/Minimal/comtest.c **** /*-----------------------------------------------------------*/
 117:../Common/Minimal/comtest.c **** 
 118:../Common/Minimal/comtest.c **** void vAltStartComTestTasks( UBaseType_t uxPriority, uint32_t ulBaudRate, UBaseType_t uxLED )
 119:../Common/Minimal/comtest.c **** {
 120:../Common/Minimal/comtest.c **** 	/* Initialise the com port then spawn the Rx and Tx tasks. */
 121:../Common/Minimal/comtest.c **** 	uxBaseLED = uxLED;
 122:../Common/Minimal/comtest.c **** 	xSerialPortInitMinimal( ulBaudRate, comBUFFER_LEN );
 123:../Common/Minimal/comtest.c **** 
 124:../Common/Minimal/comtest.c **** 	/* The Tx task is spawned with a lower priority than the Rx task. */
 125:../Common/Minimal/comtest.c **** 	xTaskCreate( vComTxTask, "COMTx", comSTACK_SIZE, NULL, uxPriority - 1, ( TaskHandle_t * ) NULL );
 126:../Common/Minimal/comtest.c **** 	xTaskCreate( vComRxTask, "COMRx", comSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
 127:../Common/Minimal/comtest.c **** }
 128:../Common/Minimal/comtest.c **** /*-----------------------------------------------------------*/
 129:../Common/Minimal/comtest.c **** 
 130:../Common/Minimal/comtest.c **** static portTASK_FUNCTION( vComTxTask, pvParameters )
 131:../Common/Minimal/comtest.c **** {
 132:../Common/Minimal/comtest.c **** char cByteToSend;
 133:../Common/Minimal/comtest.c **** TickType_t xTimeToWait;
 134:../Common/Minimal/comtest.c **** 
 135:../Common/Minimal/comtest.c **** 	char serText = "Serial TX task\n";
 136:../Common/Minimal/comtest.c **** 	/* Just to stop compiler warnings. */
 137:../Common/Minimal/comtest.c **** 	( void ) pvParameters;
 138:../Common/Minimal/comtest.c **** 
 139:../Common/Minimal/comtest.c **** 	for( ;; )
 140:../Common/Minimal/comtest.c **** 	{
 141:../Common/Minimal/comtest.c **** 		/* Simply transmit a sequence of characters from comFIRST_BYTE to
 142:../Common/Minimal/comtest.c **** 		comLAST_BYTE. */
 143:../Common/Minimal/comtest.c **** //		for( cByteToSend = comFIRST_BYTE; cByteToSend <= comLAST_BYTE; cByteToSend++ )
 144:../Common/Minimal/comtest.c **** //		{
 145:../Common/Minimal/comtest.c **** //			if( xSerialPutChar( xPort, cByteToSend, comNO_BLOCK ) == pdPASS )
 146:../Common/Minimal/comtest.c **** //			{
 147:../Common/Minimal/comtest.c **** //				vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
 148:../Common/Minimal/comtest.c **** //			}
 149:../Common/Minimal/comtest.c **** //		}
 150:../Common/Minimal/comtest.c **** 	 	xSerialPutChar( xPort, 'H', comNO_BLOCK );
 151:../Common/Minimal/comtest.c **** 		xSerialPutChar( xPort, 0x0a, comNO_BLOCK );
 152:../Common/Minimal/comtest.c **** 		xSerialPutChar( xPort, 0x0d, comNO_BLOCK );
 153:../Common/Minimal/comtest.c **** //		xSerialxPrint(xPort, serText);
 154:../Common/Minimal/comtest.c **** 			
 155:../Common/Minimal/comtest.c **** 		/* Turn the LED off while we are not doing anything. */
 156:../Common/Minimal/comtest.c **** 		vParTestSetLED( uxBaseLED + comTX_LED_OFFSET, pdFALSE );
 157:../Common/Minimal/comtest.c **** 
 158:../Common/Minimal/comtest.c **** 		/* We have posted all the characters in the string - wait before
 159:../Common/Minimal/comtest.c **** 		re-sending.  Wait a pseudo-random time as this will provide a better
 160:../Common/Minimal/comtest.c **** 		test. */
 161:../Common/Minimal/comtest.c **** 		xTimeToWait = xTaskGetTickCount() + comOFFSET_TIME;
 162:../Common/Minimal/comtest.c **** 
 163:../Common/Minimal/comtest.c **** 		/* Make sure we don't wait too long... */
 164:../Common/Minimal/comtest.c **** 		xTimeToWait %= comTX_MAX_BLOCK_TIME;
 165:../Common/Minimal/comtest.c **** 
 166:../Common/Minimal/comtest.c **** 		/* ...but we do want to wait. */
 167:../Common/Minimal/comtest.c **** 		if( xTimeToWait < comTX_MIN_BLOCK_TIME )
 168:../Common/Minimal/comtest.c **** 		{
 169:../Common/Minimal/comtest.c **** 			xTimeToWait = comTX_MIN_BLOCK_TIME;
 170:../Common/Minimal/comtest.c **** 		}
 171:../Common/Minimal/comtest.c **** 
 172:../Common/Minimal/comtest.c **** 		vTaskDelay( 1500); //xTimeToWait );
 173:../Common/Minimal/comtest.c **** 	}
 174:../Common/Minimal/comtest.c **** } /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
 175:../Common/Minimal/comtest.c **** /*-----------------------------------------------------------*/
 176:../Common/Minimal/comtest.c **** 
 177:../Common/Minimal/comtest.c **** static portTASK_FUNCTION( vComRxTask, pvParameters )
 178:../Common/Minimal/comtest.c **** {
  16               		.loc 1 178 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 4
  22               		.cfi_offset 28, -3
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 5
  26               		.cfi_offset 29, -4
  27 0004 1F92      		push __zero_reg__
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 6
  30 0006 CDB7      		in r28,__SP_L__
  31 0008 DEB7      		in r29,__SP_H__
  32               	.LCFI3:
  33               		.cfi_def_cfa_register 28
  34               	/* prologue: function */
  35               	/* frame size = 1 */
  36               	/* stack size = 3 */
  37               	.L__stack_usage = 3
  38               	.LVL1:
  39               	.L4:
  40               		.loc 1 178 0
  41 000a 18E1      		ldi r17,lo8(24)
  42               	.LVL2:
  43               	.L3:
 179:../Common/Minimal/comtest.c **** signed char cExpectedByte, cByteRxed;
 180:../Common/Minimal/comtest.c **** BaseType_t xResyncRequired = pdFALSE, xErrorOccurred = pdFALSE;
 181:../Common/Minimal/comtest.c **** 
 182:../Common/Minimal/comtest.c **** 	/* Just to stop compiler warnings. */
 183:../Common/Minimal/comtest.c **** 	( void ) pvParameters;
 184:../Common/Minimal/comtest.c **** 
 185:../Common/Minimal/comtest.c **** 	for( ;; )
 186:../Common/Minimal/comtest.c **** 	{
 187:../Common/Minimal/comtest.c **** 		/* We expect to receive the characters from comFIRST_BYTE to
 188:../Common/Minimal/comtest.c **** 		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
 189:../Common/Minimal/comtest.c **** 		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
 190:../Common/Minimal/comtest.c **** 		{
 191:../Common/Minimal/comtest.c **** 			/* Block on the queue that contains received bytes until a byte is
 192:../Common/Minimal/comtest.c **** 			available. */
 193:../Common/Minimal/comtest.c **** 			if( xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME ) )
  44               		.loc 1 193 0
  45 000c 4FEF      		ldi r20,lo8(-1)
  46 000e 5FEF      		ldi r21,lo8(-1)
  47 0010 BE01      		movw r22,r28
  48 0012 6F5F      		subi r22,-1
  49 0014 7F4F      		sbci r23,-1
  50 0016 80E0      		ldi r24,0
  51 0018 90E0      		ldi r25,0
  52 001a 0E94 0000 		call xSerialGetChar
  53               	.LVL3:
  54 001e 8823      		tst r24
  55 0020 01F0      		breq .L2
 194:../Common/Minimal/comtest.c **** 			{
 195:../Common/Minimal/comtest.c **** 				/* Was this the byte we were expecting?  If so, toggle the LED,
 196:../Common/Minimal/comtest.c **** 				otherwise we are out on sync and should break out of the loop
 197:../Common/Minimal/comtest.c **** 				until the expected character sequence is about to restart. */
 198:../Common/Minimal/comtest.c **** //				if( cByteRxed == cExpectedByte )
 199:../Common/Minimal/comtest.c **** //				{
 200:../Common/Minimal/comtest.c **** 					vParTestToggleLED( uxBaseLED + comRX_LED_OFFSET );
  56               		.loc 1 200 0
  57 0022 8091 0000 		lds r24,uxBaseLED
  58 0026 8F5F      		subi r24,lo8(-(1))
  59 0028 0E94 0000 		call vParTestToggleLED
  60               	.LVL4:
  61               	.L2:
  62 002c 1150      		subi r17,lo8(-(-1))
  63               	.LVL5:
 189:../Common/Minimal/comtest.c **** 		{
  64               		.loc 1 189 0 discriminator 2
  65 002e 01F4      		brne .L3
 201:../Common/Minimal/comtest.c **** //				}
 202:../Common/Minimal/comtest.c **** //				else
 203:../Common/Minimal/comtest.c **** //				{
 204:../Common/Minimal/comtest.c **** //					xResyncRequired = pdTRUE;
 205:../Common/Minimal/comtest.c **** //					break; /*lint !e960 Non-switch break allowed. */
 206:../Common/Minimal/comtest.c **** //				}
 207:../Common/Minimal/comtest.c **** 			}
 208:../Common/Minimal/comtest.c **** 		}
 209:../Common/Minimal/comtest.c **** 
 210:../Common/Minimal/comtest.c **** 		/* Turn the LED off while we are not doing anything. */
 211:../Common/Minimal/comtest.c **** 		vParTestSetLED( uxBaseLED + comRX_LED_OFFSET, pdFALSE );
  66               		.loc 1 211 0
  67 0030 8091 0000 		lds r24,uxBaseLED
  68 0034 60E0      		ldi r22,0
  69 0036 8F5F      		subi r24,lo8(-(1))
  70 0038 0E94 0000 		call vParTestSetLED
  71               	.LVL6:
 212:../Common/Minimal/comtest.c **** 
 213:../Common/Minimal/comtest.c **** 		/* Did we break out of the loop because the characters were received in
 214:../Common/Minimal/comtest.c **** 		an unexpected order?  If so wait here until the character sequence is
 215:../Common/Minimal/comtest.c **** 		about to restart. */
 216:../Common/Minimal/comtest.c **** 		if( xResyncRequired == pdTRUE )
 217:../Common/Minimal/comtest.c **** 		{
 218:../Common/Minimal/comtest.c **** 			while( cByteRxed != comLAST_BYTE )
 219:../Common/Minimal/comtest.c **** 			{
 220:../Common/Minimal/comtest.c **** 				/* Block until the next char is available. */
 221:../Common/Minimal/comtest.c **** 				xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME );
 222:../Common/Minimal/comtest.c **** 			}
 223:../Common/Minimal/comtest.c **** 
 224:../Common/Minimal/comtest.c **** 			/* Note that an error occurred which caused us to have to resync.
 225:../Common/Minimal/comtest.c **** 			We use this to stop incrementing the loop counter so
 226:../Common/Minimal/comtest.c **** 			sAreComTestTasksStillRunning() will return false - indicating an
 227:../Common/Minimal/comtest.c **** 			error. */
 228:../Common/Minimal/comtest.c **** 			xErrorOccurred++;
 229:../Common/Minimal/comtest.c **** 
 230:../Common/Minimal/comtest.c **** 			/* We have now resynced with the Tx task and can continue. */
 231:../Common/Minimal/comtest.c **** 			xResyncRequired = pdFALSE;
 232:../Common/Minimal/comtest.c **** 		}
 233:../Common/Minimal/comtest.c **** 		else
 234:../Common/Minimal/comtest.c **** 		{
 235:../Common/Minimal/comtest.c **** 			if( xErrorOccurred < comTOTAL_PERMISSIBLE_ERRORS )
 236:../Common/Minimal/comtest.c **** 			{
 237:../Common/Minimal/comtest.c **** 				/* Increment the count of successful loops.  As error
 238:../Common/Minimal/comtest.c **** 				occurring (i.e. an unexpected character being received) will
 239:../Common/Minimal/comtest.c **** 				prevent this counter being incremented for the rest of the
 240:../Common/Minimal/comtest.c **** 				execution.   Don't worry about mutual exclusion on this
 241:../Common/Minimal/comtest.c **** 				variable - it doesn't really matter as we just want it
 242:../Common/Minimal/comtest.c **** 				to change. */
 243:../Common/Minimal/comtest.c **** 				uxRxLoops++;
  72               		.loc 1 243 0
  73 003c 8091 0000 		lds r24,uxRxLoops
  74 0040 8F5F      		subi r24,lo8(-(1))
  75 0042 8093 0000 		sts uxRxLoops,r24
  76 0046 00C0      		rjmp .L4
  77               		.cfi_endproc
  78               	.LFE6:
  81               	vComTxTask:
  82               	.LFB5:
 131:../Common/Minimal/comtest.c **** char cByteToSend;
  83               		.loc 1 131 0
  84               		.cfi_startproc
  85               	/* prologue: function */
  86               	/* frame size = 0 */
  87               	/* stack size = 0 */
  88               	.L__stack_usage = 0
  89               	.LVL7:
  90               	.L11:
 150:../Common/Minimal/comtest.c **** 		xSerialPutChar( xPort, 0x0a, comNO_BLOCK );
  91               		.loc 1 150 0
  92 0048 40E0      		ldi r20,0
  93 004a 50E0      		ldi r21,0
  94 004c 68E4      		ldi r22,lo8(72)
  95 004e 80E0      		ldi r24,0
  96 0050 90E0      		ldi r25,0
  97 0052 0E94 0000 		call xSerialPutChar
  98               	.LVL8:
 151:../Common/Minimal/comtest.c **** 		xSerialPutChar( xPort, 0x0d, comNO_BLOCK );
  99               		.loc 1 151 0
 100 0056 40E0      		ldi r20,0
 101 0058 50E0      		ldi r21,0
 102 005a 6AE0      		ldi r22,lo8(10)
 103 005c 80E0      		ldi r24,0
 104 005e 90E0      		ldi r25,0
 105 0060 0E94 0000 		call xSerialPutChar
 106               	.LVL9:
 152:../Common/Minimal/comtest.c **** //		xSerialxPrint(xPort, serText);
 107               		.loc 1 152 0
 108 0064 40E0      		ldi r20,0
 109 0066 50E0      		ldi r21,0
 110 0068 6DE0      		ldi r22,lo8(13)
 111 006a 80E0      		ldi r24,0
 112 006c 90E0      		ldi r25,0
 113 006e 0E94 0000 		call xSerialPutChar
 114               	.LVL10:
 156:../Common/Minimal/comtest.c **** 
 115               		.loc 1 156 0
 116 0072 60E0      		ldi r22,0
 117 0074 8091 0000 		lds r24,uxBaseLED
 118 0078 0E94 0000 		call vParTestSetLED
 119               	.LVL11:
 161:../Common/Minimal/comtest.c **** 
 120               		.loc 1 161 0
 121 007c 0E94 0000 		call xTaskGetTickCount
 122               	.LVL12:
 172:../Common/Minimal/comtest.c **** 	}
 123               		.loc 1 172 0
 124 0080 8CED      		ldi r24,lo8(-36)
 125 0082 95E0      		ldi r25,lo8(5)
 126 0084 0E94 0000 		call vTaskDelay
 127               	.LVL13:
 128 0088 00C0      		rjmp .L11
 129               		.cfi_endproc
 130               	.LFE5:
 132               		.section	.rodata.str1.1,"aMS",@progbits,1
 133               	.LC0:
 134 0000 434F 4D54 		.string	"COMTx"
 134      7800 
 135               	.LC1:
 136 0006 434F 4D52 		.string	"COMRx"
 136      7800 
 137               		.text
 138               	.global	vAltStartComTestTasks
 140               	vAltStartComTestTasks:
 141               	.LFB4:
 119:../Common/Minimal/comtest.c **** 	/* Initialise the com port then spawn the Rx and Tx tasks. */
 142               		.loc 1 119 0
 143               		.cfi_startproc
 144               	.LVL14:
 145 0000 EF92      		push r14
 146               	.LCFI4:
 147               		.cfi_def_cfa_offset 4
 148               		.cfi_offset 14, -3
 149 0002 FF92      		push r15
 150               	.LCFI5:
 151               		.cfi_def_cfa_offset 5
 152               		.cfi_offset 15, -4
 153 0004 0F93      		push r16
 154               	.LCFI6:
 155               		.cfi_def_cfa_offset 6
 156               		.cfi_offset 16, -5
 157 0006 CF93      		push r28
 158               	.LCFI7:
 159               		.cfi_def_cfa_offset 7
 160               		.cfi_offset 28, -6
 161               	/* prologue: function */
 162               	/* frame size = 0 */
 163               	/* stack size = 4 */
 164               	.L__stack_usage = 4
 165 0008 C82F      		mov r28,r24
 166 000a CB01      		movw r24,r22
 167 000c BA01      		movw r22,r20
 121:../Common/Minimal/comtest.c **** 	xSerialPortInitMinimal( ulBaudRate, comBUFFER_LEN );
 168               		.loc 1 121 0
 169 000e 2093 0000 		sts uxBaseLED,r18
 122:../Common/Minimal/comtest.c **** 
 170               		.loc 1 122 0
 171 0012 48E1      		ldi r20,lo8(24)
 172               	.LVL15:
 173 0014 0E94 0000 		call xSerialPortInitMinimal
 174               	.LVL16:
 125:../Common/Minimal/comtest.c **** 	xTaskCreate( vComRxTask, "COMRx", comSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
 175               		.loc 1 125 0
 176 0018 0FEF      		ldi r16,lo8(-1)
 177 001a 0C0F      		add r16,r28
 178 001c E12C      		mov r14,__zero_reg__
 179 001e F12C      		mov r15,__zero_reg__
 180 0020 20E0      		ldi r18,0
 181 0022 30E0      		ldi r19,0
 182 0024 45E5      		ldi r20,lo8(85)
 183 0026 50E0      		ldi r21,0
 184 0028 60E0      		ldi r22,lo8(.LC0)
 185 002a 70E0      		ldi r23,hi8(.LC0)
 186 002c 80E0      		ldi r24,lo8(gs(vComTxTask))
 187 002e 90E0      		ldi r25,hi8(gs(vComTxTask))
 188 0030 0E94 0000 		call xTaskCreate
 189               	.LVL17:
 126:../Common/Minimal/comtest.c **** }
 190               		.loc 1 126 0
 191 0034 0C2F      		mov r16,r28
 192 0036 20E0      		ldi r18,0
 193 0038 30E0      		ldi r19,0
 194 003a 45E5      		ldi r20,lo8(85)
 195 003c 50E0      		ldi r21,0
 196 003e 60E0      		ldi r22,lo8(.LC1)
 197 0040 70E0      		ldi r23,hi8(.LC1)
 198 0042 80E0      		ldi r24,lo8(gs(vComRxTask))
 199 0044 90E0      		ldi r25,hi8(gs(vComRxTask))
 200 0046 0E94 0000 		call xTaskCreate
 201               	.LVL18:
 202               	/* epilogue start */
 127:../Common/Minimal/comtest.c **** /*-----------------------------------------------------------*/
 203               		.loc 1 127 0
 204 004a CF91      		pop r28
 205               	.LVL19:
 206 004c 0F91      		pop r16
 207               	.LVL20:
 208 004e FF90      		pop r15
 209 0050 EF90      		pop r14
 210 0052 0895      		ret
 211               		.cfi_endproc
 212               	.LFE4:
 214               	.global	xAreComTestTasksStillRunning
 216               	xAreComTestTasksStillRunning:
 217               	.LFB7:
 244:../Common/Minimal/comtest.c **** 			}
 245:../Common/Minimal/comtest.c **** 		}
 246:../Common/Minimal/comtest.c **** 	}
 247:../Common/Minimal/comtest.c **** } /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
 248:../Common/Minimal/comtest.c **** /*-----------------------------------------------------------*/
 249:../Common/Minimal/comtest.c **** 
 250:../Common/Minimal/comtest.c **** BaseType_t xAreComTestTasksStillRunning( void )
 251:../Common/Minimal/comtest.c **** {
 218               		.loc 1 251 0
 219               		.cfi_startproc
 220               	/* prologue: function */
 221               	/* frame size = 0 */
 222               	/* stack size = 0 */
 223               	.L__stack_usage = 0
 252:../Common/Minimal/comtest.c **** BaseType_t xReturn;
 253:../Common/Minimal/comtest.c **** 
 254:../Common/Minimal/comtest.c **** 	/* If the count of successful reception loops has not changed than at
 255:../Common/Minimal/comtest.c **** 	some time an error occurred (i.e. a character was received out of sequence)
 256:../Common/Minimal/comtest.c **** 	and we will return false. */
 257:../Common/Minimal/comtest.c **** 	if( uxRxLoops == comINITIAL_RX_COUNT_VALUE )
 224               		.loc 1 257 0
 225 0054 9091 0000 		lds r25,uxRxLoops
 226               	.LVL21:
 258:../Common/Minimal/comtest.c **** 	{
 259:../Common/Minimal/comtest.c **** 		xReturn = pdFALSE;
 260:../Common/Minimal/comtest.c **** 	}
 261:../Common/Minimal/comtest.c **** 	else
 262:../Common/Minimal/comtest.c **** 	{
 263:../Common/Minimal/comtest.c **** 		xReturn = pdTRUE;
 264:../Common/Minimal/comtest.c **** 	}
 265:../Common/Minimal/comtest.c **** 
 266:../Common/Minimal/comtest.c **** 	/* Reset the count of successful Rx loops.  When this function is called
 267:../Common/Minimal/comtest.c **** 	again we expect this to have been incremented. */
 268:../Common/Minimal/comtest.c **** 	uxRxLoops = comINITIAL_RX_COUNT_VALUE;
 227               		.loc 1 268 0
 228 0058 1092 0000 		sts uxRxLoops,__zero_reg__
 269:../Common/Minimal/comtest.c **** 
 270:../Common/Minimal/comtest.c **** 	return xReturn;
 229               		.loc 1 270 0
 230 005c 81E0      		ldi r24,lo8(1)
 231 005e 9111      		cpse r25,__zero_reg__
 232 0060 00C0      		rjmp .L14
 233 0062 80E0      		ldi r24,0
 234               	.L14:
 271:../Common/Minimal/comtest.c **** }
 235               		.loc 1 271 0
 236 0064 0895      		ret
 237               		.cfi_endproc
 238               	.LFE7:
 240               	.global	xSerialxPrint
 242               	xSerialxPrint:
 243               	.LFB8:
 272:../Common/Minimal/comtest.c **** 
 273:../Common/Minimal/comtest.c **** void xSerialxPrint( xComPortHandle pxPort, uint8_t * str)
 274:../Common/Minimal/comtest.c **** {
 244               		.loc 1 274 0
 245               		.cfi_startproc
 246               	.LVL22:
 247 0066 0F93      		push r16
 248               	.LCFI8:
 249               		.cfi_def_cfa_offset 4
 250               		.cfi_offset 16, -3
 251 0068 1F93      		push r17
 252               	.LCFI9:
 253               		.cfi_def_cfa_offset 5
 254               		.cfi_offset 17, -4
 255 006a CF93      		push r28
 256               	.LCFI10:
 257               		.cfi_def_cfa_offset 6
 258               		.cfi_offset 28, -5
 259 006c DF93      		push r29
 260               	.LCFI11:
 261               		.cfi_def_cfa_offset 7
 262               		.cfi_offset 29, -6
 263               	/* prologue: function */
 264               	/* frame size = 0 */
 265               	/* stack size = 4 */
 266               	.L__stack_usage = 4
 267               	.LVL23:
 275:../Common/Minimal/comtest.c **** 	int16_t i = 0;
 276:../Common/Minimal/comtest.c **** 	size_t stringlength;
 277:../Common/Minimal/comtest.c **** 
 278:../Common/Minimal/comtest.c **** 	stringlength = strlen((char *)str);
 268               		.loc 1 278 0
 269 006e FB01      		movw r30,r22
 270               		0:
 271 0070 0190      		ld __tmp_reg__,Z+
 272 0072 0020      		tst __tmp_reg__
 273 0074 01F4      		brne 0b
 274               	.LVL24:
 275 0076 EB01      		movw r28,r22
 276 0078 8F01      		movw r16,r30
 277 007a 0150      		subi r16,1
 278 007c 1109      		sbc r17,__zero_reg__
 279               	.LVL25:
 280               	.L16:
 279:../Common/Minimal/comtest.c **** 
 280:../Common/Minimal/comtest.c **** 	while(i < stringlength)
 281               		.loc 1 280 0
 282 007e C017      		cp r28,r16
 283 0080 D107      		cpc r29,r17
 284 0082 01F0      		breq .L19
 285               	.LVL26:
 281:../Common/Minimal/comtest.c **** 	{
 282:../Common/Minimal/comtest.c **** 		//xSerialPutChar( pxPort, str[i++]);
 283:../Common/Minimal/comtest.c **** 		if( xSerialPutChar( xPort, str[i++], comNO_BLOCK ) == pdPASS )
 286               		.loc 1 283 0
 287 0084 6991      		ld r22,Y+
 288               	.LVL27:
 289 0086 40E0      		ldi r20,0
 290 0088 50E0      		ldi r21,0
 291 008a 80E0      		ldi r24,0
 292 008c 90E0      		ldi r25,0
 293 008e 0E94 0000 		call xSerialPutChar
 294               	.LVL28:
 295 0092 8130      		cpi r24,lo8(1)
 296 0094 01F4      		brne .L16
 284:../Common/Minimal/comtest.c **** 		{
 285:../Common/Minimal/comtest.c **** 			vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
 297               		.loc 1 285 0
 298 0096 8091 0000 		lds r24,uxBaseLED
 299 009a 0E94 0000 		call vParTestToggleLED
 300               	.LVL29:
 301 009e 00C0      		rjmp .L16
 302               	.L19:
 303               	/* epilogue start */
 286:../Common/Minimal/comtest.c **** 		}
 287:../Common/Minimal/comtest.c **** 	}
 288:../Common/Minimal/comtest.c **** }
 304               		.loc 1 288 0
 305 00a0 DF91      		pop r29
 306 00a2 CF91      		pop r28
 307               	.LVL30:
 308 00a4 1F91      		pop r17
 309 00a6 0F91      		pop r16
 310               	.LVL31:
 311 00a8 0895      		ret
 312               		.cfi_endproc
 313               	.LFE8:
 315               		.local	uxRxLoops
 316               		.comm	uxRxLoops,1,1
 317               		.local	uxBaseLED
 318               		.comm	uxBaseLED,1,1
 319               	.Letext0:
 320               		.file 2 "/home/link/avr8-gnu-toolchain/lib/gcc/avr/5.4.0/include/stddef.h"
 321               		.file 3 "/home/link/avr8-gnu-toolchain/avr/include/stdint.h"
 322               		.file 4 "../../Source/include/../portable/GCC/ATMega323/portmacro.h"
 323               		.file 5 "../../Source/include/task.h"
 324               		.file 6 "../Common/include/serial.h"
 325               		.file 7 "../Common/include/partest.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 comtest.c
     /tmp/cczBE85n.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cczBE85n.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cczBE85n.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cczBE85n.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cczBE85n.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cczBE85n.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cczBE85n.s:13     .lowtext:0000000000000000 vComRxTask
     /tmp/cczBE85n.s:316    .bss:0000000000000001 uxBaseLED
                             .bss:0000000000000000 uxRxLoops
     /tmp/cczBE85n.s:81     .lowtext:0000000000000048 vComTxTask
     /tmp/cczBE85n.s:140    .text:0000000000000000 vAltStartComTestTasks
     /tmp/cczBE85n.s:216    .text:0000000000000054 xAreComTestTasksStillRunning
     /tmp/cczBE85n.s:242    .text:0000000000000066 xSerialxPrint

UNDEFINED SYMBOLS
xSerialGetChar
vParTestToggleLED
vParTestSetLED
xSerialPutChar
xTaskGetTickCount
vTaskDelay
xSerialPortInitMinimal
xTaskCreate
__do_copy_data
__do_clear_bss
