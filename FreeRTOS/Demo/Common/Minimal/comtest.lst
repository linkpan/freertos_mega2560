   1               		.file	"comtest.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.lowtext,"ax",@progbits
  13               	vComRxTask:
  14               	.LFB6:
  15               		.file 1 "../Common/Minimal/comtest.c"
   1:../Common/Minimal/comtest.c **** /*
   2:../Common/Minimal/comtest.c ****  * FreeRTOS Kernel V10.1.1
   3:../Common/Minimal/comtest.c ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Common/Minimal/comtest.c ****  *
   5:../Common/Minimal/comtest.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Common/Minimal/comtest.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Common/Minimal/comtest.c ****  * the Software without restriction, including without limitation the rights to
   8:../Common/Minimal/comtest.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Common/Minimal/comtest.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Common/Minimal/comtest.c ****  * subject to the following conditions:
  11:../Common/Minimal/comtest.c ****  *
  12:../Common/Minimal/comtest.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../Common/Minimal/comtest.c ****  * copies or substantial portions of the Software.
  14:../Common/Minimal/comtest.c ****  *
  15:../Common/Minimal/comtest.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Common/Minimal/comtest.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Common/Minimal/comtest.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Common/Minimal/comtest.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Common/Minimal/comtest.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Common/Minimal/comtest.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Common/Minimal/comtest.c ****  *
  22:../Common/Minimal/comtest.c ****  * http://www.FreeRTOS.org
  23:../Common/Minimal/comtest.c ****  * http://aws.amazon.com/freertos
  24:../Common/Minimal/comtest.c ****  *
  25:../Common/Minimal/comtest.c ****  * 1 tab == 4 spaces!
  26:../Common/Minimal/comtest.c ****  */
  27:../Common/Minimal/comtest.c **** 
  28:../Common/Minimal/comtest.c **** 
  29:../Common/Minimal/comtest.c **** /*
  30:../Common/Minimal/comtest.c ****  * This version of comtest. c is for use on systems that have limited stack
  31:../Common/Minimal/comtest.c ****  * space and no display facilities.  The complete version can be found in
  32:../Common/Minimal/comtest.c ****  * the Demo/Common/Full directory.
  33:../Common/Minimal/comtest.c ****  *
  34:../Common/Minimal/comtest.c ****  * Creates two tasks that operate on an interrupt driven serial port.  A
  35:../Common/Minimal/comtest.c ****  * loopback connector should be used so that everything that is transmitted is
  36:../Common/Minimal/comtest.c ****  * also received.  The serial port does not use any flow control.  On a
  37:../Common/Minimal/comtest.c ****  * standard 9way 'D' connector pins two and three should be connected together.
  38:../Common/Minimal/comtest.c ****  *
  39:../Common/Minimal/comtest.c ****  * The first task posts a sequence of characters to the Tx queue, toggling an
  40:../Common/Minimal/comtest.c ****  * LED on each successful post.  At the end of the sequence it sleeps for a
  41:../Common/Minimal/comtest.c ****  * pseudo-random period before resending the same sequence.
  42:../Common/Minimal/comtest.c ****  *
  43:../Common/Minimal/comtest.c ****  * The UART Tx end interrupt is enabled whenever data is available in the Tx
  44:../Common/Minimal/comtest.c ****  * queue.  The Tx end ISR removes a single character from the Tx queue and
  45:../Common/Minimal/comtest.c ****  * passes it to the UART for transmission.
  46:../Common/Minimal/comtest.c ****  *
  47:../Common/Minimal/comtest.c ****  * The second task blocks on the Rx queue waiting for a character to become
  48:../Common/Minimal/comtest.c ****  * available.  When the UART Rx end interrupt receives a character it places
  49:../Common/Minimal/comtest.c ****  * it in the Rx queue, waking the second task.  The second task checks that the
  50:../Common/Minimal/comtest.c ****  * characters removed from the Rx queue form the same sequence as those posted
  51:../Common/Minimal/comtest.c ****  * to the Tx queue, and toggles an LED for each correct character.
  52:../Common/Minimal/comtest.c ****  *
  53:../Common/Minimal/comtest.c ****  * The receiving task is spawned with a higher priority than the transmitting
  54:../Common/Minimal/comtest.c ****  * task.  The receiver will therefore wake every time a character is
  55:../Common/Minimal/comtest.c ****  * transmitted so neither the Tx or Rx queue should ever hold more than a few
  56:../Common/Minimal/comtest.c ****  * characters.
  57:../Common/Minimal/comtest.c ****  *
  58:../Common/Minimal/comtest.c ****  */
  59:../Common/Minimal/comtest.c **** 
  60:../Common/Minimal/comtest.c **** /* Scheduler include files. */
  61:../Common/Minimal/comtest.c **** #include <stdlib.h>
  62:../Common/Minimal/comtest.c **** #include "FreeRTOS.h"
  63:../Common/Minimal/comtest.c **** #include "task.h"
  64:../Common/Minimal/comtest.c **** 
  65:../Common/Minimal/comtest.c **** /* Demo program include files. */
  66:../Common/Minimal/comtest.c **** #include "serial.h"
  67:../Common/Minimal/comtest.c **** #include "comtest.h"
  68:../Common/Minimal/comtest.c **** #include "partest.h"
  69:../Common/Minimal/comtest.c **** 
  70:../Common/Minimal/comtest.c **** #define comSTACK_SIZE				configMINIMAL_STACK_SIZE
  71:../Common/Minimal/comtest.c **** #define comTX_LED_OFFSET			( 0 )
  72:../Common/Minimal/comtest.c **** #define comRX_LED_OFFSET			( 1 )
  73:../Common/Minimal/comtest.c **** #define comTOTAL_PERMISSIBLE_ERRORS ( 2 )
  74:../Common/Minimal/comtest.c **** 
  75:../Common/Minimal/comtest.c **** /* The Tx task will transmit the sequence of characters at a pseudo random
  76:../Common/Minimal/comtest.c **** interval.  This is the maximum and minimum block time between sends. */
  77:../Common/Minimal/comtest.c **** #define comTX_MAX_BLOCK_TIME		( ( TickType_t ) 0x96 )
  78:../Common/Minimal/comtest.c **** #define comTX_MIN_BLOCK_TIME		( ( TickType_t ) 0x32 )
  79:../Common/Minimal/comtest.c **** #define comOFFSET_TIME				( ( TickType_t ) 3 )
  80:../Common/Minimal/comtest.c **** 
  81:../Common/Minimal/comtest.c **** /* We should find that each character can be queued for Tx immediately and we
  82:../Common/Minimal/comtest.c **** don't have to block to send. */
  83:../Common/Minimal/comtest.c **** #define comNO_BLOCK					( ( TickType_t ) 0 )
  84:../Common/Minimal/comtest.c **** 
  85:../Common/Minimal/comtest.c **** /* The Rx task will block on the Rx queue for a long period. */
  86:../Common/Minimal/comtest.c **** #define comRX_BLOCK_TIME			( ( TickType_t ) 0xffff )
  87:../Common/Minimal/comtest.c **** 
  88:../Common/Minimal/comtest.c **** /* The sequence transmitted is from comFIRST_BYTE to and including comLAST_BYTE. */
  89:../Common/Minimal/comtest.c **** #define comFIRST_BYTE				( 'A' )
  90:../Common/Minimal/comtest.c **** #define comLAST_BYTE				( 'X' )
  91:../Common/Minimal/comtest.c **** 
  92:../Common/Minimal/comtest.c **** #define comBUFFER_LEN				( ( UBaseType_t ) ( comLAST_BYTE - comFIRST_BYTE ) + ( UBaseType_t ) 1 )
  93:../Common/Minimal/comtest.c **** #define comINITIAL_RX_COUNT_VALUE	( 0 )
  94:../Common/Minimal/comtest.c **** 
  95:../Common/Minimal/comtest.c **** /* Handle to the com port used by both tasks. */
  96:../Common/Minimal/comtest.c **** static xComPortHandle xPort = NULL;
  97:../Common/Minimal/comtest.c **** 
  98:../Common/Minimal/comtest.c **** /* The transmit task as described at the top of the file. */
  99:../Common/Minimal/comtest.c **** static portTASK_FUNCTION_PROTO( vComTxTask, pvParameters );
 100:../Common/Minimal/comtest.c **** 
 101:../Common/Minimal/comtest.c **** /* The receive task as described at the top of the file. */
 102:../Common/Minimal/comtest.c **** static portTASK_FUNCTION_PROTO( vComRxTask, pvParameters );
 103:../Common/Minimal/comtest.c **** 
 104:../Common/Minimal/comtest.c **** /* The LED that should be toggled by the Rx and Tx tasks.  The Rx task will
 105:../Common/Minimal/comtest.c **** toggle LED ( uxBaseLED + comRX_LED_OFFSET).  The Tx task will toggle LED
 106:../Common/Minimal/comtest.c **** ( uxBaseLED + comTX_LED_OFFSET ). */
 107:../Common/Minimal/comtest.c **** static UBaseType_t uxBaseLED = 0;
 108:../Common/Minimal/comtest.c **** 
 109:../Common/Minimal/comtest.c **** /* Check variable used to ensure no error have occurred.  The Rx task will
 110:../Common/Minimal/comtest.c **** increment this variable after every successfully received sequence.  If at any
 111:../Common/Minimal/comtest.c **** time the sequence is incorrect the the variable will stop being incremented. */
 112:../Common/Minimal/comtest.c **** static volatile UBaseType_t uxRxLoops = comINITIAL_RX_COUNT_VALUE;
 113:../Common/Minimal/comtest.c **** 
 114:../Common/Minimal/comtest.c **** /*-----------------------------------------------------------*/
 115:../Common/Minimal/comtest.c **** 
 116:../Common/Minimal/comtest.c **** void vAltStartComTestTasks( UBaseType_t uxPriority, uint32_t ulBaudRate, UBaseType_t uxLED )
 117:../Common/Minimal/comtest.c **** {
 118:../Common/Minimal/comtest.c **** 	/* Initialise the com port then spawn the Rx and Tx tasks. */
 119:../Common/Minimal/comtest.c **** 	uxBaseLED = uxLED;
 120:../Common/Minimal/comtest.c **** 	xSerialPortInitMinimal( ulBaudRate, comBUFFER_LEN );
 121:../Common/Minimal/comtest.c **** 
 122:../Common/Minimal/comtest.c **** 	/* The Tx task is spawned with a lower priority than the Rx task. */
 123:../Common/Minimal/comtest.c **** 	xTaskCreate( vComTxTask, "COMTx", comSTACK_SIZE, NULL, uxPriority - 1, ( TaskHandle_t * ) NULL );
 124:../Common/Minimal/comtest.c **** 	xTaskCreate( vComRxTask, "COMRx", comSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
 125:../Common/Minimal/comtest.c **** }
 126:../Common/Minimal/comtest.c **** /*-----------------------------------------------------------*/
 127:../Common/Minimal/comtest.c **** 
 128:../Common/Minimal/comtest.c **** static portTASK_FUNCTION( vComTxTask, pvParameters )
 129:../Common/Minimal/comtest.c **** {
 130:../Common/Minimal/comtest.c **** char cByteToSend;
 131:../Common/Minimal/comtest.c **** TickType_t xTimeToWait;
 132:../Common/Minimal/comtest.c **** 
 133:../Common/Minimal/comtest.c **** 	/* Just to stop compiler warnings. */
 134:../Common/Minimal/comtest.c **** 	( void ) pvParameters;
 135:../Common/Minimal/comtest.c **** 
 136:../Common/Minimal/comtest.c **** 	for( ;; )
 137:../Common/Minimal/comtest.c **** 	{
 138:../Common/Minimal/comtest.c **** 		/* Simply transmit a sequence of characters from comFIRST_BYTE to
 139:../Common/Minimal/comtest.c **** 		comLAST_BYTE. */
 140:../Common/Minimal/comtest.c **** 		for( cByteToSend = comFIRST_BYTE; cByteToSend <= comLAST_BYTE; cByteToSend++ )
 141:../Common/Minimal/comtest.c **** 		{
 142:../Common/Minimal/comtest.c **** 			if( xSerialPutChar( xPort, cByteToSend, comNO_BLOCK ) == pdPASS )
 143:../Common/Minimal/comtest.c **** 			{
 144:../Common/Minimal/comtest.c **** 				vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
 145:../Common/Minimal/comtest.c **** 			}
 146:../Common/Minimal/comtest.c **** 		}
 147:../Common/Minimal/comtest.c **** 
 148:../Common/Minimal/comtest.c **** 		/* Turn the LED off while we are not doing anything. */
 149:../Common/Minimal/comtest.c **** 		vParTestSetLED( uxBaseLED + comTX_LED_OFFSET, pdFALSE );
 150:../Common/Minimal/comtest.c **** 
 151:../Common/Minimal/comtest.c **** 		/* We have posted all the characters in the string - wait before
 152:../Common/Minimal/comtest.c **** 		re-sending.  Wait a pseudo-random time as this will provide a better
 153:../Common/Minimal/comtest.c **** 		test. */
 154:../Common/Minimal/comtest.c **** 		xTimeToWait = xTaskGetTickCount() + comOFFSET_TIME;
 155:../Common/Minimal/comtest.c **** 
 156:../Common/Minimal/comtest.c **** 		/* Make sure we don't wait too long... */
 157:../Common/Minimal/comtest.c **** 		xTimeToWait %= comTX_MAX_BLOCK_TIME;
 158:../Common/Minimal/comtest.c **** 
 159:../Common/Minimal/comtest.c **** 		/* ...but we do want to wait. */
 160:../Common/Minimal/comtest.c **** 		if( xTimeToWait < comTX_MIN_BLOCK_TIME )
 161:../Common/Minimal/comtest.c **** 		{
 162:../Common/Minimal/comtest.c **** 			xTimeToWait = comTX_MIN_BLOCK_TIME;
 163:../Common/Minimal/comtest.c **** 		}
 164:../Common/Minimal/comtest.c **** 
 165:../Common/Minimal/comtest.c **** 		vTaskDelay( xTimeToWait );
 166:../Common/Minimal/comtest.c **** 	}
 167:../Common/Minimal/comtest.c **** } /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
 168:../Common/Minimal/comtest.c **** /*-----------------------------------------------------------*/
 169:../Common/Minimal/comtest.c **** 
 170:../Common/Minimal/comtest.c **** static portTASK_FUNCTION( vComRxTask, pvParameters )
 171:../Common/Minimal/comtest.c **** {
  16               		.loc 1 171 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 4
  22               		.cfi_offset 28, -3
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 5
  26               		.cfi_offset 29, -4
  27 0004 1F92      		push __zero_reg__
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 6
  30 0006 CDB7      		in r28,__SP_L__
  31 0008 DEB7      		in r29,__SP_H__
  32               	.LCFI3:
  33               		.cfi_def_cfa_register 28
  34               	/* prologue: function */
  35               	/* frame size = 1 */
  36               	/* stack size = 3 */
  37               	.L__stack_usage = 3
  38               	.LVL1:
 172:../Common/Minimal/comtest.c **** signed char cExpectedByte, cByteRxed;
 173:../Common/Minimal/comtest.c **** BaseType_t xResyncRequired = pdFALSE, xErrorOccurred = pdFALSE;
  39               		.loc 1 173 0
  40 000a 00E0      		ldi r16,0
  41               	.LVL2:
  42               	.L2:
 174:../Common/Minimal/comtest.c **** 
 175:../Common/Minimal/comtest.c **** 	/* Just to stop compiler warnings. */
 176:../Common/Minimal/comtest.c **** 	( void ) pvParameters;
 177:../Common/Minimal/comtest.c **** 
 178:../Common/Minimal/comtest.c **** 	for( ;; )
 179:../Common/Minimal/comtest.c **** 	{
 180:../Common/Minimal/comtest.c **** 		/* We expect to receive the characters from comFIRST_BYTE to
 181:../Common/Minimal/comtest.c **** 		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
 182:../Common/Minimal/comtest.c **** 		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
  43               		.loc 1 182 0
  44 000c 11E4      		ldi r17,lo8(65)
  45               	.LVL3:
  46               	.L5:
 183:../Common/Minimal/comtest.c **** 		{
 184:../Common/Minimal/comtest.c **** 			/* Block on the queue that contains received bytes until a byte is
 185:../Common/Minimal/comtest.c **** 			available. */
 186:../Common/Minimal/comtest.c **** 			if( xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME ) )
  47               		.loc 1 186 0
  48 000e 4FEF      		ldi r20,lo8(-1)
  49 0010 5FEF      		ldi r21,lo8(-1)
  50 0012 BE01      		movw r22,r28
  51 0014 6F5F      		subi r22,-1
  52 0016 7F4F      		sbci r23,-1
  53 0018 80E0      		ldi r24,0
  54 001a 90E0      		ldi r25,0
  55 001c 0E94 0000 		call xSerialGetChar
  56               	.LVL4:
  57 0020 8823      		tst r24
  58 0022 01F0      		breq .L3
 187:../Common/Minimal/comtest.c **** 			{
 188:../Common/Minimal/comtest.c **** 				/* Was this the byte we were expecting?  If so, toggle the LED,
 189:../Common/Minimal/comtest.c **** 				otherwise we are out on sync and should break out of the loop
 190:../Common/Minimal/comtest.c **** 				until the expected character sequence is about to restart. */
 191:../Common/Minimal/comtest.c **** 				if( cByteRxed == cExpectedByte )
  59               		.loc 1 191 0
  60 0024 8981      		ldd r24,Y+1
  61 0026 8113      		cpse r24,r17
  62 0028 00C0      		rjmp .L10
 192:../Common/Minimal/comtest.c **** 				{
 193:../Common/Minimal/comtest.c **** 					vParTestToggleLED( uxBaseLED + comRX_LED_OFFSET );
  63               		.loc 1 193 0
  64 002a 8091 0000 		lds r24,uxBaseLED
  65 002e 8F5F      		subi r24,lo8(-(1))
  66 0030 0E94 0000 		call vParTestToggleLED
  67               	.LVL5:
  68               	.L3:
  69 0034 1F5F      		subi r17,lo8(-(1))
  70               	.LVL6:
 182:../Common/Minimal/comtest.c **** 		{
  71               		.loc 1 182 0 discriminator 2
  72 0036 1935      		cpi r17,lo8(89)
  73 0038 01F4      		brne .L5
  74 003a 10E0      		ldi r17,0
  75               	.LVL7:
  76 003c 00C0      		rjmp .L4
  77               	.LVL8:
  78               	.L10:
 194:../Common/Minimal/comtest.c **** 				}
 195:../Common/Minimal/comtest.c **** 				else
 196:../Common/Minimal/comtest.c **** 				{
 197:../Common/Minimal/comtest.c **** 					xResyncRequired = pdTRUE;
  79               		.loc 1 197 0
  80 003e 11E0      		ldi r17,lo8(1)
  81               	.LVL9:
  82               	.L4:
 198:../Common/Minimal/comtest.c **** 					break; /*lint !e960 Non-switch break allowed. */
 199:../Common/Minimal/comtest.c **** 				}
 200:../Common/Minimal/comtest.c **** 			}
 201:../Common/Minimal/comtest.c **** 		}
 202:../Common/Minimal/comtest.c **** 
 203:../Common/Minimal/comtest.c **** 		/* Turn the LED off while we are not doing anything. */
 204:../Common/Minimal/comtest.c **** 		vParTestSetLED( uxBaseLED + comRX_LED_OFFSET, pdFALSE );
  83               		.loc 1 204 0
  84 0040 8091 0000 		lds r24,uxBaseLED
  85 0044 60E0      		ldi r22,0
  86 0046 8F5F      		subi r24,lo8(-(1))
  87 0048 0E94 0000 		call vParTestSetLED
  88               	.LVL10:
 205:../Common/Minimal/comtest.c **** 
 206:../Common/Minimal/comtest.c **** 		/* Did we break out of the loop because the characters were received in
 207:../Common/Minimal/comtest.c **** 		an unexpected order?  If so wait here until the character sequence is
 208:../Common/Minimal/comtest.c **** 		about to restart. */
 209:../Common/Minimal/comtest.c **** 		if( xResyncRequired == pdTRUE )
  89               		.loc 1 209 0
  90 004c 1130      		cpi r17,lo8(1)
  91 004e 01F4      		brne .L17
  92               	.L6:
 210:../Common/Minimal/comtest.c **** 		{
 211:../Common/Minimal/comtest.c **** 			while( cByteRxed != comLAST_BYTE )
  93               		.loc 1 211 0
  94 0050 8981      		ldd r24,Y+1
  95 0052 8835      		cpi r24,lo8(88)
  96 0054 01F0      		breq .L19
 212:../Common/Minimal/comtest.c **** 			{
 213:../Common/Minimal/comtest.c **** 				/* Block until the next char is available. */
 214:../Common/Minimal/comtest.c **** 				xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME );
  97               		.loc 1 214 0
  98 0056 4FEF      		ldi r20,lo8(-1)
  99 0058 5FEF      		ldi r21,lo8(-1)
 100 005a BE01      		movw r22,r28
 101 005c 6F5F      		subi r22,-1
 102 005e 7F4F      		sbci r23,-1
 103 0060 80E0      		ldi r24,0
 104 0062 90E0      		ldi r25,0
 105 0064 0E94 0000 		call xSerialGetChar
 106               	.LVL11:
 107 0068 00C0      		rjmp .L6
 108               	.L19:
 215:../Common/Minimal/comtest.c **** 			}
 216:../Common/Minimal/comtest.c **** 
 217:../Common/Minimal/comtest.c **** 			/* Note that an error occurred which caused us to have to resync.
 218:../Common/Minimal/comtest.c **** 			We use this to stop incrementing the loop counter so
 219:../Common/Minimal/comtest.c **** 			sAreComTestTasksStillRunning() will return false - indicating an
 220:../Common/Minimal/comtest.c **** 			error. */
 221:../Common/Minimal/comtest.c **** 			xErrorOccurred++;
 109               		.loc 1 221 0
 110 006a 0F5F      		subi r16,lo8(-(1))
 111               	.LVL12:
 112 006c 00C0      		rjmp .L2
 113               	.L17:
 222:../Common/Minimal/comtest.c **** 
 223:../Common/Minimal/comtest.c **** 			/* We have now resynced with the Tx task and can continue. */
 224:../Common/Minimal/comtest.c **** 			xResyncRequired = pdFALSE;
 225:../Common/Minimal/comtest.c **** 		}
 226:../Common/Minimal/comtest.c **** 		else
 227:../Common/Minimal/comtest.c **** 		{
 228:../Common/Minimal/comtest.c **** 			if( xErrorOccurred < comTOTAL_PERMISSIBLE_ERRORS )
 114               		.loc 1 228 0
 115 006e 0230      		cpi r16,lo8(2)
 116 0070 04F4      		brge .L2
 229:../Common/Minimal/comtest.c **** 			{
 230:../Common/Minimal/comtest.c **** 				/* Increment the count of successful loops.  As error
 231:../Common/Minimal/comtest.c **** 				occurring (i.e. an unexpected character being received) will
 232:../Common/Minimal/comtest.c **** 				prevent this counter being incremented for the rest of the
 233:../Common/Minimal/comtest.c **** 				execution.   Don't worry about mutual exclusion on this
 234:../Common/Minimal/comtest.c **** 				variable - it doesn't really matter as we just want it
 235:../Common/Minimal/comtest.c **** 				to change. */
 236:../Common/Minimal/comtest.c **** 				uxRxLoops++;
 117               		.loc 1 236 0
 118 0072 8091 0000 		lds r24,uxRxLoops
 119 0076 8F5F      		subi r24,lo8(-(1))
 120 0078 8093 0000 		sts uxRxLoops,r24
 121 007c 00C0      		rjmp .L2
 122               		.cfi_endproc
 123               	.LFE6:
 126               	vComTxTask:
 127               	.LFB5:
 129:../Common/Minimal/comtest.c **** char cByteToSend;
 128               		.loc 1 129 0
 129               		.cfi_startproc
 130               	.LVL13:
 131               	/* prologue: function */
 132               	/* frame size = 0 */
 133               	/* stack size = 0 */
 134               	.L__stack_usage = 0
 157:../Common/Minimal/comtest.c **** 
 135               		.loc 1 157 0
 136 007e 06E9      		ldi r16,lo8(-106)
 137 0080 10E0      		ldi r17,0
 138               	.LVL14:
 139               	.L24:
 140:../Common/Minimal/comtest.c **** 		{
 140               		.loc 1 140 0
 141 0082 C1E4      		ldi r28,lo8(65)
 142               	.LVL15:
 143               	.L22:
 142:../Common/Minimal/comtest.c **** 			{
 144               		.loc 1 142 0
 145 0084 40E0      		ldi r20,0
 146 0086 50E0      		ldi r21,0
 147 0088 6C2F      		mov r22,r28
 148 008a 80E0      		ldi r24,0
 149 008c 90E0      		ldi r25,0
 150 008e 0E94 0000 		call xSerialPutChar
 151               	.LVL16:
 152 0092 8130      		cpi r24,lo8(1)
 153 0094 01F4      		brne .L21
 144:../Common/Minimal/comtest.c **** 			}
 154               		.loc 1 144 0
 155 0096 8091 0000 		lds r24,uxBaseLED
 156 009a 0E94 0000 		call vParTestToggleLED
 157               	.LVL17:
 158               	.L21:
 159 009e CF5F      		subi r28,lo8(-(1))
 160               	.LVL18:
 140:../Common/Minimal/comtest.c **** 		{
 161               		.loc 1 140 0 discriminator 2
 162 00a0 C935      		cpi r28,lo8(89)
 163 00a2 01F4      		brne .L22
 149:../Common/Minimal/comtest.c **** 
 164               		.loc 1 149 0
 165 00a4 60E0      		ldi r22,0
 166 00a6 8091 0000 		lds r24,uxBaseLED
 167 00aa 0E94 0000 		call vParTestSetLED
 168               	.LVL19:
 154:../Common/Minimal/comtest.c **** 
 169               		.loc 1 154 0
 170 00ae 0E94 0000 		call xTaskGetTickCount
 171               	.LVL20:
 172 00b2 0396      		adiw r24,3
 173               	.LVL21:
 157:../Common/Minimal/comtest.c **** 
 174               		.loc 1 157 0
 175 00b4 B801      		movw r22,r16
 176 00b6 0E94 0000 		call __udivmodhi4
 177               	.LVL22:
 160:../Common/Minimal/comtest.c **** 		{
 178               		.loc 1 160 0
 179 00ba 8233      		cpi r24,50
 180 00bc 9105      		cpc r25,__zero_reg__
 181 00be 00F4      		brsh .L23
 162:../Common/Minimal/comtest.c **** 		}
 182               		.loc 1 162 0
 183 00c0 82E3      		ldi r24,lo8(50)
 184 00c2 90E0      		ldi r25,0
 185               	.LVL23:
 186               	.L23:
 165:../Common/Minimal/comtest.c **** 	}
 187               		.loc 1 165 0
 188 00c4 0E94 0000 		call vTaskDelay
 189               	.LVL24:
 166:../Common/Minimal/comtest.c **** } /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
 190               		.loc 1 166 0
 191 00c8 00C0      		rjmp .L24
 192               		.cfi_endproc
 193               	.LFE5:
 195               		.section	.rodata.str1.1,"aMS",@progbits,1
 196               	.LC0:
 197 0000 434F 4D54 		.string	"COMTx"
 197      7800 
 198               	.LC1:
 199 0006 434F 4D52 		.string	"COMRx"
 199      7800 
 200               		.text
 201               	.global	vAltStartComTestTasks
 203               	vAltStartComTestTasks:
 204               	.LFB4:
 117:../Common/Minimal/comtest.c **** 	/* Initialise the com port then spawn the Rx and Tx tasks. */
 205               		.loc 1 117 0
 206               		.cfi_startproc
 207               	.LVL25:
 208 0000 EF92      		push r14
 209               	.LCFI4:
 210               		.cfi_def_cfa_offset 4
 211               		.cfi_offset 14, -3
 212 0002 FF92      		push r15
 213               	.LCFI5:
 214               		.cfi_def_cfa_offset 5
 215               		.cfi_offset 15, -4
 216 0004 0F93      		push r16
 217               	.LCFI6:
 218               		.cfi_def_cfa_offset 6
 219               		.cfi_offset 16, -5
 220 0006 CF93      		push r28
 221               	.LCFI7:
 222               		.cfi_def_cfa_offset 7
 223               		.cfi_offset 28, -6
 224               	/* prologue: function */
 225               	/* frame size = 0 */
 226               	/* stack size = 4 */
 227               	.L__stack_usage = 4
 228 0008 C82F      		mov r28,r24
 229 000a CB01      		movw r24,r22
 230 000c BA01      		movw r22,r20
 119:../Common/Minimal/comtest.c **** 	xSerialPortInitMinimal( ulBaudRate, comBUFFER_LEN );
 231               		.loc 1 119 0
 232 000e 2093 0000 		sts uxBaseLED,r18
 120:../Common/Minimal/comtest.c **** 
 233               		.loc 1 120 0
 234 0012 48E1      		ldi r20,lo8(24)
 235               	.LVL26:
 236 0014 0E94 0000 		call xSerialPortInitMinimal
 237               	.LVL27:
 123:../Common/Minimal/comtest.c **** 	xTaskCreate( vComRxTask, "COMRx", comSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
 238               		.loc 1 123 0
 239 0018 0FEF      		ldi r16,lo8(-1)
 240 001a 0C0F      		add r16,r28
 241 001c E12C      		mov r14,__zero_reg__
 242 001e F12C      		mov r15,__zero_reg__
 243 0020 20E0      		ldi r18,0
 244 0022 30E0      		ldi r19,0
 245 0024 45E5      		ldi r20,lo8(85)
 246 0026 50E0      		ldi r21,0
 247 0028 60E0      		ldi r22,lo8(.LC0)
 248 002a 70E0      		ldi r23,hi8(.LC0)
 249 002c 80E0      		ldi r24,lo8(gs(vComTxTask))
 250 002e 90E0      		ldi r25,hi8(gs(vComTxTask))
 251 0030 0E94 0000 		call xTaskCreate
 252               	.LVL28:
 124:../Common/Minimal/comtest.c **** }
 253               		.loc 1 124 0
 254 0034 0C2F      		mov r16,r28
 255 0036 20E0      		ldi r18,0
 256 0038 30E0      		ldi r19,0
 257 003a 45E5      		ldi r20,lo8(85)
 258 003c 50E0      		ldi r21,0
 259 003e 60E0      		ldi r22,lo8(.LC1)
 260 0040 70E0      		ldi r23,hi8(.LC1)
 261 0042 80E0      		ldi r24,lo8(gs(vComRxTask))
 262 0044 90E0      		ldi r25,hi8(gs(vComRxTask))
 263 0046 0E94 0000 		call xTaskCreate
 264               	.LVL29:
 265               	/* epilogue start */
 125:../Common/Minimal/comtest.c **** /*-----------------------------------------------------------*/
 266               		.loc 1 125 0
 267 004a CF91      		pop r28
 268               	.LVL30:
 269 004c 0F91      		pop r16
 270               	.LVL31:
 271 004e FF90      		pop r15
 272 0050 EF90      		pop r14
 273 0052 0895      		ret
 274               		.cfi_endproc
 275               	.LFE4:
 277               	.global	xAreComTestTasksStillRunning
 279               	xAreComTestTasksStillRunning:
 280               	.LFB7:
 237:../Common/Minimal/comtest.c **** 			}
 238:../Common/Minimal/comtest.c **** 		}
 239:../Common/Minimal/comtest.c **** 	}
 240:../Common/Minimal/comtest.c **** } /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
 241:../Common/Minimal/comtest.c **** /*-----------------------------------------------------------*/
 242:../Common/Minimal/comtest.c **** 
 243:../Common/Minimal/comtest.c **** BaseType_t xAreComTestTasksStillRunning( void )
 244:../Common/Minimal/comtest.c **** {
 281               		.loc 1 244 0
 282               		.cfi_startproc
 283               	/* prologue: function */
 284               	/* frame size = 0 */
 285               	/* stack size = 0 */
 286               	.L__stack_usage = 0
 245:../Common/Minimal/comtest.c **** BaseType_t xReturn;
 246:../Common/Minimal/comtest.c **** 
 247:../Common/Minimal/comtest.c **** 	/* If the count of successful reception loops has not changed than at
 248:../Common/Minimal/comtest.c **** 	some time an error occurred (i.e. a character was received out of sequence)
 249:../Common/Minimal/comtest.c **** 	and we will return false. */
 250:../Common/Minimal/comtest.c **** 	if( uxRxLoops == comINITIAL_RX_COUNT_VALUE )
 287               		.loc 1 250 0
 288 0054 9091 0000 		lds r25,uxRxLoops
 289               	.LVL32:
 251:../Common/Minimal/comtest.c **** 	{
 252:../Common/Minimal/comtest.c **** 		xReturn = pdFALSE;
 253:../Common/Minimal/comtest.c **** 	}
 254:../Common/Minimal/comtest.c **** 	else
 255:../Common/Minimal/comtest.c **** 	{
 256:../Common/Minimal/comtest.c **** 		xReturn = pdTRUE;
 257:../Common/Minimal/comtest.c **** 	}
 258:../Common/Minimal/comtest.c **** 
 259:../Common/Minimal/comtest.c **** 	/* Reset the count of successful Rx loops.  When this function is called
 260:../Common/Minimal/comtest.c **** 	again we expect this to have been incremented. */
 261:../Common/Minimal/comtest.c **** 	uxRxLoops = comINITIAL_RX_COUNT_VALUE;
 290               		.loc 1 261 0
 291 0058 1092 0000 		sts uxRxLoops,__zero_reg__
 262:../Common/Minimal/comtest.c **** 
 263:../Common/Minimal/comtest.c **** 	return xReturn;
 292               		.loc 1 263 0
 293 005c 81E0      		ldi r24,lo8(1)
 294 005e 9111      		cpse r25,__zero_reg__
 295 0060 00C0      		rjmp .L28
 296 0062 80E0      		ldi r24,0
 297               	.L28:
 264:../Common/Minimal/comtest.c **** }
 298               		.loc 1 264 0
 299 0064 0895      		ret
 300               		.cfi_endproc
 301               	.LFE7:
 303               		.local	uxRxLoops
 304               		.comm	uxRxLoops,1,1
 305               		.local	uxBaseLED
 306               		.comm	uxBaseLED,1,1
 307               	.Letext0:
 308               		.file 2 "/home/link/avr8-gnu-toolchain/avr/include/stdint.h"
 309               		.file 3 "../../Source/include/../portable/GCC/ATMega323/portmacro.h"
 310               		.file 4 "../../Source/include/task.h"
 311               		.file 5 "../Common/include/serial.h"
 312               		.file 6 "../Common/include/partest.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 comtest.c
     /tmp/cczqHwXC.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cczqHwXC.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cczqHwXC.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cczqHwXC.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cczqHwXC.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cczqHwXC.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cczqHwXC.s:13     .lowtext:0000000000000000 vComRxTask
     /tmp/cczqHwXC.s:304    .bss:0000000000000001 uxBaseLED
                             .bss:0000000000000000 uxRxLoops
     /tmp/cczqHwXC.s:126    .lowtext:000000000000007e vComTxTask
     /tmp/cczqHwXC.s:203    .text:0000000000000000 vAltStartComTestTasks
     /tmp/cczqHwXC.s:279    .text:0000000000000054 xAreComTestTasksStillRunning

UNDEFINED SYMBOLS
xSerialGetChar
vParTestToggleLED
vParTestSetLED
xSerialPutChar
xTaskGetTickCount
__udivmodhi4
vTaskDelay
xSerialPortInitMinimal
xTaskCreate
__do_copy_data
__do_clear_bss
