   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  12               	vMyLedBlink5:
  13               	.LFB10:
  14               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****  * FreeRTOS Kernel V10.1.1
   3:main.c        ****  * Copyright (C) 2018 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:main.c        ****  *
   5:main.c        ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:main.c        ****  * this software and associated documentation files (the "Software"), to deal in
   7:main.c        ****  * the Software without restriction, including without limitation the rights to
   8:main.c        ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:main.c        ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:main.c        ****  * subject to the following conditions:
  11:main.c        ****  *
  12:main.c        ****  * The above copyright notice and this permission notice shall be included in all
  13:main.c        ****  * copies or substantial portions of the Software.
  14:main.c        ****  *
  15:main.c        ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:main.c        ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:main.c        ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:main.c        ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:main.c        ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:main.c        ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:main.c        ****  *
  22:main.c        ****  * http://www.FreeRTOS.org
  23:main.c        ****  * http://aws.amazon.com/freertos
  24:main.c        ****  *
  25:main.c        ****  * 1 tab == 4 spaces!
  26:main.c        ****  */
  27:main.c        **** 
  28:main.c        **** 
  29:main.c        **** #include <stdlib.h>
  30:main.c        **** #include <string.h>
  31:main.c        **** 
  32:main.c        **** #ifdef GCC_MEGA_AVR
  33:main.c        **** 	#include <avr/eeprom.h>
  34:main.c        **** #endif
  35:main.c        **** 
  36:main.c        **** /* Scheduler include files. */
  37:main.c        **** #include "FreeRTOS.h"
  38:main.c        **** #include "task.h"
  39:main.c        **** #include "croutine.h"
  40:main.c        **** 
  41:main.c        **** /* Demo file headers. */
  42:main.c        **** #include "PollQ.h"
  43:main.c        **** #include "integer.h"
  44:main.c        **** #include "serial.h"
  45:main.c        **** #include "comtest.h"
  46:main.c        **** #include "crflash.h"
  47:main.c        **** #include "print.h"
  48:main.c        **** #include "partest.h"
  49:main.c        **** #include "regtest.h"
  50:main.c        **** 
  51:main.c        **** /* Priority definitions for most of the tasks in the demo application.  Some
  52:main.c        **** tasks just use the idle priority. */
  53:main.c        **** #define mainLED_TASK_PRIORITY			( tskIDLE_PRIORITY + 1 )
  54:main.c        **** #define mainCOM_TEST_PRIORITY			( tskIDLE_PRIORITY + 2 )
  55:main.c        **** #define mainQUEUE_POLL_PRIORITY			( tskIDLE_PRIORITY + 2 )
  56:main.c        **** #define mainCHECK_TASK_PRIORITY			( tskIDLE_PRIORITY + 3 )
  57:main.c        **** #define mainLED6_TASK_PRIORITY			(tskIDLE_PRIORITY )
  58:main.c        **** 
  59:main.c        **** /* Baud rate used by the serial port tasks. */
  60:main.c        **** #define mainCOM_TEST_BAUD_RATE			( ( unsigned long ) 115200 )
  61:main.c        **** 
  62:main.c        **** /* LED used by the serial port tasks.  This is toggled on each character Tx,
  63:main.c        **** and mainCOM_TEST_LED + 1 is toggles on each character Rx. */
  64:main.c        **** #define mainCOM_TEST_LED				( 4 )
  65:main.c        **** 
  66:main.c        **** /* LED that is toggled by the check task.  The check task periodically checks
  67:main.c        **** that all the other tasks are operating without error.  If no errors are found
  68:main.c        **** the LED is toggled.  If an error is found at any time the LED is never toggles
  69:main.c        **** again. */
  70:main.c        **** #define mainCHECK_TASK_LED				( 7 )
  71:main.c        **** 
  72:main.c        **** /* The period between executions of the check task. */
  73:main.c        **** #define mainCHECK_PERIOD				( ( TickType_t ) 3000 / portTICK_PERIOD_MS  )
  74:main.c        **** 
  75:main.c        **** /* An address in the EEPROM used to count resets.  This is used to check that
  76:main.c        **** the demo application is not unexpectedly resetting. */
  77:main.c        **** #define mainRESET_COUNT_ADDRESS			( ( void * ) 0x50 )
  78:main.c        **** 
  79:main.c        **** /* The number of coroutines to create. */
  80:main.c        **** #define mainNUM_FLASH_COROUTINES		( 3 )
  81:main.c        **** 
  82:main.c        **** /*
  83:main.c        ****  * The task function for the "Check" task.
  84:main.c        ****  */
  85:main.c        **** static void vErrorChecks( void *pvParameters );
  86:main.c        **** 
  87:main.c        **** static void vMyLedBlink5(void);
  88:main.c        **** static void vMyLedBlink6(void);
  89:main.c        **** 
  90:main.c        **** /*
  91:main.c        ****  * Checks the unique counts of other tasks to ensure they are still operational.
  92:main.c        ****  * Flashes an LED if everything is okay.
  93:main.c        ****  */
  94:main.c        **** static void prvCheckOtherTasksAreStillRunning( void );
  95:main.c        **** 
  96:main.c        **** /*
  97:main.c        ****  * Called on boot to increment a count stored in the EEPROM.  This is used to
  98:main.c        ****  * ensure the CPU does not reset unexpectedly.
  99:main.c        ****  */
 100:main.c        **** static void prvIncrementResetCount( void );
 101:main.c        **** 
 102:main.c        **** /*
 103:main.c        ****  * The idle hook is used to scheduler co-routines.
 104:main.c        ****  */
 105:main.c        **** void vApplicationIdleHook( void );
 106:main.c        **** 
 107:main.c        **** /*-----------------------------------------------------------*/
 108:main.c        **** 
 109:main.c        **** short main( void )
 110:main.c        **** {
 111:main.c        **** //	prvIncrementResetCount();
 112:main.c        **** 
 113:main.c        **** 	/* Setup the LED's for output. */
 114:main.c        **** 	vParTestInitialise();
 115:main.c        **** 
 116:main.c        **** 	/* Create the standard demo tasks. */
 117:main.c        **** //	vStartIntegerMathTasks( tskIDLE_PRIORITY );
 118:main.c        **** 	vAltStartComTestTasks( mainCOM_TEST_PRIORITY, mainCOM_TEST_BAUD_RATE, mainCOM_TEST_LED );  //creat
 119:main.c        **** //	vStartPolledQueueTasks( mainQUEUE_POLL_PRIORITY );  //creates queue and tasks vPolledQueueConsum
 120:main.c        **** //	vStartRegTestTasks();  //creates tasks prvRegisterCheck1, prvRegisterCheck2
 121:main.c        **** 
 122:main.c        **** 	/* Create the tasks defined within this file. */
 123:main.c        **** 	xTaskCreate( vErrorChecks, "Check", configMINIMAL_STACK_SIZE, NULL, mainCHECK_TASK_PRIORITY, NULL 
 124:main.c        **** 
 125:main.c        **** 	
 126:main.c        **** 	/* Create new LED tasks to work away from default main fct*/
 127:main.c        **** 	xTaskCreate(vMyLedBlink6, "LED6", configMINIMAL_STACK_SIZE, NULL, mainLED6_TASK_PRIORITY, NULL);
 128:main.c        **** 	xTaskCreate(vMyLedBlink5, "LED5", configMINIMAL_STACK_SIZE, NULL, mainLED6_TASK_PRIORITY, NULL);
 129:main.c        **** 
 130:main.c        **** 	
 131:main.c        **** 	
 132:main.c        **** 	/* Create the co-routines that flash the LED's. */
 133:main.c        **** 	vStartFlashCoRoutines( mainNUM_FLASH_COROUTINES );
 134:main.c        **** 
 135:main.c        **** //	vSerialPutString( xComPortHandle pxPort, const signed char * const pcString, unsigned short usSt
 136:main.c        **** 	
 137:main.c        **** 	/* In this port, to use preemptive scheduler define configUSE_PREEMPTION
 138:main.c        **** 	as 1 in portmacro.h.  To use the cooperative scheduler define
 139:main.c        **** 	configUSE_PREEMPTION as 0. */
 140:main.c        **** 	vTaskStartScheduler();
 141:main.c        **** 
 142:main.c        **** 	return 0;
 143:main.c        **** }
 144:main.c        **** /*-----------------------------------------------------------*/
 145:main.c        **** 
 146:main.c        **** static void vErrorChecks( void *pvParameters )
 147:main.c        **** {
 148:main.c        **** static volatile unsigned long ulDummyVariable = 3UL;
 149:main.c        **** 
 150:main.c        **** 	/* The parameters are not used. */
 151:main.c        **** 	( void ) pvParameters;
 152:main.c        **** 
 153:main.c        **** 	/* Cycle for ever, delaying then checking all the other tasks are still
 154:main.c        **** 	operating without error. */
 155:main.c        **** 	for( ;; )
 156:main.c        **** 	{
 157:main.c        **** 		vTaskDelay( mainCHECK_PERIOD );
 158:main.c        **** 
 159:main.c        **** 		/* Perform a bit of 32bit maths to ensure the registers used by the
 160:main.c        **** 		integer tasks get some exercise. The result here is not important -
 161:main.c        **** 		see the demo application documentation for more info. */
 162:main.c        **** 		ulDummyVariable *= 3;
 163:main.c        **** 
 164:main.c        **** 		prvCheckOtherTasksAreStillRunning();
 165:main.c        **** 	}
 166:main.c        **** }
 167:main.c        **** /*-----------------------------------------------------------*/
 168:main.c        **** 
 169:main.c        **** static void prvCheckOtherTasksAreStillRunning( void )
 170:main.c        **** {
 171:main.c        **** static portBASE_TYPE xErrorHasOccurred = pdFALSE;
 172:main.c        **** 
 173:main.c        **** 	if( xAreIntegerMathsTaskStillRunning() != pdTRUE )
 174:main.c        **** 	{
 175:main.c        **** 		xErrorHasOccurred = pdTRUE;
 176:main.c        **** 	}
 177:main.c        **** 
 178:main.c        **** 	if( xAreComTestTasksStillRunning() != pdTRUE )
 179:main.c        **** 	{
 180:main.c        **** 		xErrorHasOccurred = pdTRUE;
 181:main.c        **** 	}
 182:main.c        **** 
 183:main.c        **** 	if( xArePollingQueuesStillRunning() != pdTRUE )
 184:main.c        **** 	{
 185:main.c        **** 		xErrorHasOccurred = pdTRUE;
 186:main.c        **** 	}
 187:main.c        **** 
 188:main.c        **** 	if( xAreRegTestTasksStillRunning() != pdTRUE )
 189:main.c        **** 	{
 190:main.c        **** 		xErrorHasOccurred = pdTRUE;
 191:main.c        **** 	}
 192:main.c        **** 
 193:main.c        **** 	if( xErrorHasOccurred == pdFALSE )
 194:main.c        **** 	{
 195:main.c        **** 		/* Toggle the LED if everything is okay so we know if an error occurs even if not
 196:main.c        **** 		using console IO. */
 197:main.c        **** 		vParTestToggleLED( mainCHECK_TASK_LED );
 198:main.c        **** 	}
 199:main.c        **** }
 200:main.c        **** /*-----------------------------------------------------------*/
 201:main.c        **** 
 202:main.c        **** static void prvIncrementResetCount( void )
 203:main.c        **** {
 204:main.c        **** unsigned char ucCount;
 205:main.c        **** 
 206:main.c        **** 	eeprom_read_block( &ucCount, mainRESET_COUNT_ADDRESS, sizeof( ucCount ) );
 207:main.c        **** 	ucCount++;
 208:main.c        **** 	eeprom_write_byte( mainRESET_COUNT_ADDRESS, ucCount );
 209:main.c        **** }
 210:main.c        **** /*-----------------------------------------------------------*/
 211:main.c        **** 
 212:main.c        **** void vApplicationIdleHook( void )
 213:main.c        **** {
 214:main.c        **** 	vCoRoutineSchedule();
 215:main.c        **** }
 216:main.c        **** 
 217:main.c        **** void vMyLedBlink6(void)
 218:main.c        **** {
 219:main.c        **** 	TickType_t xLastWakeTime;
 220:main.c        **** 	xLastWakeTime = xTaskGetTickCount();
 221:main.c        **** 	
 222:main.c        **** 	for(;;)
 223:main.c        **** 	{
 224:main.c        **** 		vParTestToggleLED(6);
 225:main.c        **** 		vTaskDelayUntil(&xLastWakeTime, 2000); //pdMS_TO_TICKS(500));
 226:main.c        **** //		vTaskDelay(2000);
 227:main.c        **** 	} //end for
 228:main.c        **** } //end myledblink6
 229:main.c        **** 						
 230:main.c        **** 						
 231:main.c        **** void vMyLedBlink5(void)
 232:main.c        **** {
  15               		.loc 1 232 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.L2:
 233:main.c        **** 	//TickType_t xLastWakeTime;
 234:main.c        **** 	//xLastWakeTime = xTaskGetTickCount();
 235:main.c        **** 	
 236:main.c        **** 	for(;;)
 237:main.c        **** 	{
 238:main.c        **** 		vParTestToggleLED(5);
  22               		.loc 1 238 0 discriminator 1
  23 0000 85E0      		ldi r24,lo8(5)
  24 0002 0E94 0000 		call vParTestToggleLED
  25               	.LVL0:
 239:main.c        **** //		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(2500));
 240:main.c        **** 		vTaskDelay(2500);
  26               		.loc 1 240 0 discriminator 1
  27 0006 84EC      		ldi r24,lo8(-60)
  28 0008 99E0      		ldi r25,lo8(9)
  29 000a 0E94 0000 		call vTaskDelay
  30               	.LVL1:
  31 000e 00C0      		rjmp .L2
  32               		.cfi_endproc
  33               	.LFE10:
  36               	vMyLedBlink6:
  37               	.LFB9:
 218:main.c        **** 	TickType_t xLastWakeTime;
  38               		.loc 1 218 0
  39               		.cfi_startproc
  40 0010 CF93      		push r28
  41               	.LCFI0:
  42               		.cfi_def_cfa_offset 4
  43               		.cfi_offset 28, -3
  44 0012 DF93      		push r29
  45               	.LCFI1:
  46               		.cfi_def_cfa_offset 5
  47               		.cfi_offset 29, -4
  48 0014 1F92      		push __zero_reg__
  49 0016 1F92      		push __zero_reg__
  50               	.LCFI2:
  51               		.cfi_def_cfa_offset 7
  52 0018 CDB7      		in r28,__SP_L__
  53 001a DEB7      		in r29,__SP_H__
  54               	.LCFI3:
  55               		.cfi_def_cfa_register 28
  56               	/* prologue: function */
  57               	/* frame size = 2 */
  58               	/* stack size = 4 */
  59               	.L__stack_usage = 4
 220:main.c        **** 	
  60               		.loc 1 220 0
  61 001c 0E94 0000 		call xTaskGetTickCount
  62               	.LVL2:
  63 0020 9A83      		std Y+2,r25
  64 0022 8983      		std Y+1,r24
  65               	.L4:
 224:main.c        **** 		vTaskDelayUntil(&xLastWakeTime, 2000); //pdMS_TO_TICKS(500));
  66               		.loc 1 224 0 discriminator 1
  67 0024 86E0      		ldi r24,lo8(6)
  68 0026 0E94 0000 		call vParTestToggleLED
  69               	.LVL3:
 225:main.c        **** //		vTaskDelay(2000);
  70               		.loc 1 225 0 discriminator 1
  71 002a 60ED      		ldi r22,lo8(-48)
  72 002c 77E0      		ldi r23,lo8(7)
  73 002e CE01      		movw r24,r28
  74 0030 0196      		adiw r24,1
  75 0032 0E94 0000 		call vTaskDelayUntil
  76               	.LVL4:
  77 0036 00C0      		rjmp .L4
  78               		.cfi_endproc
  79               	.LFE9:
  82               	vErrorChecks:
  83               	.LFB5:
 147:main.c        **** static volatile unsigned long ulDummyVariable = 3UL;
  84               		.loc 1 147 0
  85               		.cfi_startproc
  86               	.LVL5:
  87               	/* prologue: function */
  88               	/* frame size = 0 */
  89               	/* stack size = 0 */
  90               	.L__stack_usage = 0
  91               	.LBB4:
  92               	.LBB5:
 175:main.c        **** 	}
  93               		.loc 1 175 0
  94 0038 C1E0      		ldi r28,lo8(1)
  95               	.LVL6:
  96               	.L11:
  97               	.LBE5:
  98               	.LBE4:
 157:main.c        **** 
  99               		.loc 1 157 0 discriminator 1
 100 003a 88EB      		ldi r24,lo8(-72)
 101 003c 9BE0      		ldi r25,lo8(11)
 102 003e 0E94 0000 		call vTaskDelay
 103               	.LVL7:
 162:main.c        **** 
 104               		.loc 1 162 0 discriminator 1
 105 0042 2091 0000 		lds r18,ulDummyVariable.2402
 106 0046 3091 0000 		lds r19,ulDummyVariable.2402+1
 107 004a 4091 0000 		lds r20,ulDummyVariable.2402+2
 108 004e 5091 0000 		lds r21,ulDummyVariable.2402+3
 109 0052 A3E0      		ldi r26,lo8(3)
 110 0054 B0E0      		ldi r27,0
 111 0056 0E94 0000 		call __muluhisi3
 112 005a 6093 0000 		sts ulDummyVariable.2402,r22
 113 005e 7093 0000 		sts ulDummyVariable.2402+1,r23
 114 0062 8093 0000 		sts ulDummyVariable.2402+2,r24
 115 0066 9093 0000 		sts ulDummyVariable.2402+3,r25
 116               	.LBB7:
 117               	.LBB6:
 173:main.c        **** 	{
 118               		.loc 1 173 0 discriminator 1
 119 006a 0E94 0000 		call xAreIntegerMathsTaskStillRunning
 120               	.LVL8:
 121 006e 8130      		cpi r24,lo8(1)
 122 0070 01F0      		breq .L7
 175:main.c        **** 	}
 123               		.loc 1 175 0
 124 0072 C093 0000 		sts xErrorHasOccurred.2407,r28
 125               	.L7:
 178:main.c        **** 	{
 126               		.loc 1 178 0
 127 0076 0E94 0000 		call xAreComTestTasksStillRunning
 128               	.LVL9:
 129 007a 8130      		cpi r24,lo8(1)
 130 007c 01F0      		breq .L8
 180:main.c        **** 	}
 131               		.loc 1 180 0
 132 007e C093 0000 		sts xErrorHasOccurred.2407,r28
 133               	.L8:
 183:main.c        **** 	{
 134               		.loc 1 183 0
 135 0082 0E94 0000 		call xArePollingQueuesStillRunning
 136               	.LVL10:
 137 0086 8130      		cpi r24,lo8(1)
 138 0088 01F0      		breq .L9
 185:main.c        **** 	}
 139               		.loc 1 185 0
 140 008a C093 0000 		sts xErrorHasOccurred.2407,r28
 141               	.L9:
 188:main.c        **** 	{
 142               		.loc 1 188 0
 143 008e 0E94 0000 		call xAreRegTestTasksStillRunning
 144               	.LVL11:
 145 0092 8130      		cpi r24,lo8(1)
 146 0094 01F0      		breq .L10
 190:main.c        **** 	}
 147               		.loc 1 190 0
 148 0096 C093 0000 		sts xErrorHasOccurred.2407,r28
 149               	.L10:
 193:main.c        **** 	{
 150               		.loc 1 193 0
 151 009a 8091 0000 		lds r24,xErrorHasOccurred.2407
 152 009e 8111      		cpse r24,__zero_reg__
 153 00a0 00C0      		rjmp .L11
 197:main.c        **** 	}
 154               		.loc 1 197 0
 155 00a2 87E0      		ldi r24,lo8(7)
 156 00a4 0E94 0000 		call vParTestToggleLED
 157               	.LVL12:
 158 00a8 00C0      		rjmp .L11
 159               	.LBE6:
 160               	.LBE7:
 161               		.cfi_endproc
 162               	.LFE5:
 164               		.section	.rodata.str1.1,"aMS",@progbits,1
 165               	.LC0:
 166 0000 4368 6563 		.string	"Check"
 166      6B00 
 167               	.LC1:
 168 0006 4C45 4436 		.string	"LED6"
 168      00
 169               	.LC2:
 170 000b 4C45 4435 		.string	"LED5"
 170      00
 171               		.section	.text.startup,"ax",@progbits
 172               	.global	main
 174               	main:
 175               	.LFB4:
 110:main.c        **** //	prvIncrementResetCount();
 176               		.loc 1 110 0
 177               		.cfi_startproc
 178 0000 EF92      		push r14
 179               	.LCFI4:
 180               		.cfi_def_cfa_offset 4
 181               		.cfi_offset 14, -3
 182 0002 FF92      		push r15
 183               	.LCFI5:
 184               		.cfi_def_cfa_offset 5
 185               		.cfi_offset 15, -4
 186 0004 0F93      		push r16
 187               	.LCFI6:
 188               		.cfi_def_cfa_offset 6
 189               		.cfi_offset 16, -5
 190               	/* prologue: function */
 191               	/* frame size = 0 */
 192               	/* stack size = 3 */
 193               	.L__stack_usage = 3
 114:main.c        **** 
 194               		.loc 1 114 0
 195 0006 0E94 0000 		call vParTestInitialise
 196               	.LVL13:
 118:main.c        **** //	vStartPolledQueueTasks( mainQUEUE_POLL_PRIORITY );  //creates queue and tasks vPolledQueueConsum
 197               		.loc 1 118 0
 198 000a 24E0      		ldi r18,lo8(4)
 199 000c 40E0      		ldi r20,0
 200 000e 52EC      		ldi r21,lo8(-62)
 201 0010 61E0      		ldi r22,lo8(1)
 202 0012 70E0      		ldi r23,0
 203 0014 82E0      		ldi r24,lo8(2)
 204 0016 0E94 0000 		call vAltStartComTestTasks
 205               	.LVL14:
 123:main.c        **** 
 206               		.loc 1 123 0
 207 001a E12C      		mov r14,__zero_reg__
 208 001c F12C      		mov r15,__zero_reg__
 209 001e 03E0      		ldi r16,lo8(3)
 210 0020 20E0      		ldi r18,0
 211 0022 30E0      		ldi r19,0
 212 0024 45E5      		ldi r20,lo8(85)
 213 0026 50E0      		ldi r21,0
 214 0028 60E0      		ldi r22,lo8(.LC0)
 215 002a 70E0      		ldi r23,hi8(.LC0)
 216 002c 80E0      		ldi r24,lo8(gs(vErrorChecks))
 217 002e 90E0      		ldi r25,hi8(gs(vErrorChecks))
 218 0030 0E94 0000 		call xTaskCreate
 219               	.LVL15:
 127:main.c        **** 	xTaskCreate(vMyLedBlink5, "LED5", configMINIMAL_STACK_SIZE, NULL, mainLED6_TASK_PRIORITY, NULL);
 220               		.loc 1 127 0
 221 0034 00E0      		ldi r16,0
 222 0036 20E0      		ldi r18,0
 223 0038 30E0      		ldi r19,0
 224 003a 45E5      		ldi r20,lo8(85)
 225 003c 50E0      		ldi r21,0
 226 003e 60E0      		ldi r22,lo8(.LC1)
 227 0040 70E0      		ldi r23,hi8(.LC1)
 228 0042 80E0      		ldi r24,lo8(gs(vMyLedBlink6))
 229 0044 90E0      		ldi r25,hi8(gs(vMyLedBlink6))
 230 0046 0E94 0000 		call xTaskCreate
 231               	.LVL16:
 128:main.c        **** 
 232               		.loc 1 128 0
 233 004a 20E0      		ldi r18,0
 234 004c 30E0      		ldi r19,0
 235 004e 45E5      		ldi r20,lo8(85)
 236 0050 50E0      		ldi r21,0
 237 0052 60E0      		ldi r22,lo8(.LC2)
 238 0054 70E0      		ldi r23,hi8(.LC2)
 239 0056 80E0      		ldi r24,lo8(gs(vMyLedBlink5))
 240 0058 90E0      		ldi r25,hi8(gs(vMyLedBlink5))
 241 005a 0E94 0000 		call xTaskCreate
 242               	.LVL17:
 133:main.c        **** 
 243               		.loc 1 133 0
 244 005e 83E0      		ldi r24,lo8(3)
 245 0060 0E94 0000 		call vStartFlashCoRoutines
 246               	.LVL18:
 140:main.c        **** 
 247               		.loc 1 140 0
 248 0064 0E94 0000 		call vTaskStartScheduler
 249               	.LVL19:
 143:main.c        **** /*-----------------------------------------------------------*/
 250               		.loc 1 143 0
 251 0068 80E0      		ldi r24,0
 252 006a 90E0      		ldi r25,0
 253               	/* epilogue start */
 254 006c 0F91      		pop r16
 255 006e FF90      		pop r15
 256 0070 EF90      		pop r14
 257 0072 0895      		ret
 258               		.cfi_endproc
 259               	.LFE4:
 261               		.text
 262               	.global	vApplicationIdleHook
 264               	vApplicationIdleHook:
 265               	.LFB8:
 213:main.c        **** 	vCoRoutineSchedule();
 266               		.loc 1 213 0
 267               		.cfi_startproc
 268               	/* prologue: function */
 269               	/* frame size = 0 */
 270               	/* stack size = 0 */
 271               	.L__stack_usage = 0
 214:main.c        **** }
 272               		.loc 1 214 0
 273 00aa 0C94 0000 		jmp vCoRoutineSchedule
 274               	.LVL20:
 275               		.cfi_endproc
 276               	.LFE8:
 278               		.local	xErrorHasOccurred.2407
 279               		.comm	xErrorHasOccurred.2407,1,1
 280               		.data
 283               	ulDummyVariable.2402:
 284 0000 03        		.byte	3
 285 0001 00        		.byte	0
 286 0002 00        		.byte	0
 287 0003 00        		.byte	0
 288               		.text
 289               	.Letext0:
 290               		.file 2 "/home/link/avr8-gnu-toolchain/avr/include/stdint.h"
 291               		.file 3 "../../Source/include/../portable/GCC/ATMega323/portmacro.h"
 292               		.file 4 "../Common/include/partest.h"
 293               		.file 5 "../../Source/include/task.h"
 294               		.file 6 "../Common/include/integer.h"
 295               		.file 7 "../Common/include/comtest.h"
 296               		.file 8 "../Common/include/PollQ.h"
 297               		.file 9 "regtest.h"
 298               		.file 10 "../Common/include/crflash.h"
 299               		.file 11 "../../Source/include/croutine.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccvETM4Z.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccvETM4Z.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccvETM4Z.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccvETM4Z.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccvETM4Z.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccvETM4Z.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccvETM4Z.s:12     .text:0000000000000000 vMyLedBlink5
     /tmp/ccvETM4Z.s:36     .text:0000000000000010 vMyLedBlink6
     /tmp/ccvETM4Z.s:82     .text:0000000000000038 vErrorChecks
     /tmp/ccvETM4Z.s:283    .data:0000000000000000 ulDummyVariable.2402
                             .bss:0000000000000000 xErrorHasOccurred.2407
     /tmp/ccvETM4Z.s:174    .text.startup:0000000000000000 main
     /tmp/ccvETM4Z.s:264    .text:00000000000000aa vApplicationIdleHook

UNDEFINED SYMBOLS
vParTestToggleLED
vTaskDelay
xTaskGetTickCount
vTaskDelayUntil
__muluhisi3
xAreIntegerMathsTaskStillRunning
xAreComTestTasksStillRunning
xArePollingQueuesStillRunning
xAreRegTestTasksStillRunning
vParTestInitialise
vAltStartComTestTasks
xTaskCreate
vStartFlashCoRoutines
vTaskStartScheduler
vCoRoutineSchedule
__do_copy_data
__do_clear_bss
